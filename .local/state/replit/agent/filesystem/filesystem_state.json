{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a multi-player gaming platform that supports various board and card games including Chess, Checkers, Hearts, Spades, Crazy 8s, and Go Fish. The application provides real-time multiplayer functionality with support for human players, AI bots, and spectators. Users can create game rooms, join existing games, and interact through an integrated chat system.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **Routing**: Wouter for client-side routing with pages for login, main hub, game lobby, and active game rooms\n- **State Management**: TanStack Query for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with custom CSS variables for theming and dark mode support\n- **Real-time Communication**: WebSocket client for live game updates, chat, and player interactions\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Real-time Features**: WebSocket server implementation for multiplayer game state synchronization\n- **Game Logic**: Dedicated game engine service that handles game initialization, move validation, and state updates\n- **AI System**: Bot service with configurable difficulty levels (easy, medium, hard) for each supported game type\n- **Storage Layer**: Abstracted storage interface with in-memory implementation for development\n\n## Database Schema\n- **Users**: Player accounts with guest user support\n- **Game Rooms**: Room metadata including game type, settings, host, and privacy options\n- **Game Participants**: Player/bot assignments to rooms with ready states and spectator flags\n- **Game States**: Current game data, turn information, and move history stored as JSONB\n- **Chat Messages**: Room-based messaging system with user attribution and timestamps\n\n## Authentication & Session Management\n- Simple username-based authentication with guest user support\n- Session storage using localStorage for client-side user persistence\n- No complex authentication system - focuses on casual gaming experience\n\n## Game Engine Design\n- **Modular Game Support**: Extensible architecture supporting multiple game types through a unified interface\n- **Turn Management**: Server-side turn validation and state progression\n- **Move Validation**: Game-specific rule enforcement and legal move checking\n- **State Synchronization**: Real-time game state broadcasting to all participants and spectators\n\n## Real-time Communication\n- **WebSocket Integration**: Bidirectional communication for game moves, chat, and room events\n- **Event Types**: Structured message system for game starts, moves, updates, chat, and player state changes\n- **Connection Management**: Automatic reconnection logic with exponential backoff\n- **Room-based Broadcasting**: Messages routed to appropriate game room participants\n\n# External Dependencies\n\n## Database\n- **Neon Database**: Serverless PostgreSQL database using `@neondatabase/serverless` driver\n- **Connection**: Environment variable `DATABASE_URL` required for database connectivity\n\n## UI Component Libraries\n- **Radix UI**: Comprehensive set of unstyled, accessible UI primitives for form controls, navigation, and interactive elements\n- **Lucide React**: Icon library providing consistent iconography throughout the application\n\n## Development Tools\n- **Vite**: Fast build tool with HMR for development and optimized production builds\n- **TypeScript**: Type safety across frontend, backend, and shared schema definitions\n- **ESBuild**: Backend bundling for production deployment\n\n## Utility Libraries\n- **TanStack Query**: Server state management with caching, background updates, and optimistic updates\n- **React Hook Form**: Form state management with validation support\n- **Zod**: Runtime type validation and schema generation from Drizzle schemas\n- **Wouter**: Lightweight client-side routing solution\n- **Date-fns**: Date manipulation and formatting utilities\n\n## WebSocket Infrastructure\n- **ws**: WebSocket library for Node.js server implementation\n- **Native WebSocket API**: Browser-based WebSocket client for real-time communication\n\n## Session Management\n- **connect-pg-simple**: PostgreSQL session store for Express sessions (configured but may not be actively used)","size_bytes":4526},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        game: {\n          dark: \"var(--game-dark)\",\n          navy: \"var(--game-navy)\",\n          slate: \"var(--game-slate)\",\n          blue: \"var(--game-blue)\",\n          emerald: \"var(--game-emerald)\",\n          text: \"var(--game-text)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3017},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// Environment variable validation\nfunction validateEnvironment() {\n  const warnings: string[] = [];\n  const errors: string[] = [];\n\n  // Check for database URL (optional for in-memory storage)\n  if (!process.env.DATABASE_URL) {\n    if (process.env.NODE_ENV === 'production') {\n      warnings.push('DATABASE_URL is not set - using in-memory storage (data will not persist)');\n    } else {\n      log('ℹ️  Using in-memory storage for development');\n    }\n  }\n\n  // Check for recommended environment variables\n  if (!process.env.SESSION_SECRET) {\n    if (process.env.NODE_ENV === 'production') {\n      errors.push('SESSION_SECRET is required in production');\n    } else {\n      warnings.push('SESSION_SECRET is not set - using generated fallback (not recommended for production)');\n      // Generate a fallback SESSION_SECRET for development/demo purposes\n      process.env.SESSION_SECRET = `fallback-secret-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n  }\n\n  if (warnings.length > 0) {\n    warnings.forEach(warning => log(`⚠️  WARNING: ${warning}`));\n  }\n\n  if (errors.length > 0) {\n    errors.forEach(error => log(`❌ ERROR: ${error}`));\n    throw new Error(`Environment validation failed: ${errors.join(', ')}`);\n  }\n\n  log('✅ Environment variables validated');\n}\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    // Validate environment variables before starting\n    validateEnvironment();\n    \n    const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    // Log the error for debugging\n    log(`❌ Error ${status}: ${message}`);\n    if (err.stack && process.env.NODE_ENV === 'development') {\n      console.error(err.stack);\n    }\n\n    res.status(status).json({ message });\n    // Don't re-throw the error to prevent crashes\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`🚀 Server successfully started on port ${port}`);\n    log(`🌐 Health check available at http://localhost:${port}/api/health`);\n  });\n\n  // Handle server startup errors\n  server.on('error', (error: any) => {\n    if (error.code === 'EADDRINUSE') {\n      log(`❌ Port ${port} is already in use`);\n    } else {\n      log(`❌ Server error: ${error.message}`);\n    }\n    process.exit(1);\n  });\n\n  } catch (error: any) {\n    log(`❌ Failed to start server: ${error.message}`);\n    if (error.stack && process.env.NODE_ENV === 'development') {\n      console.error(error.stack);\n    }\n    process.exit(1);\n  }\n})().catch((error) => {\n  log(`❌ Unhandled startup error: ${error.message}`);\n  process.exit(1);\n});\n\n// Handle uncaught exceptions and unhandled rejections\nprocess.on('uncaughtException', (error) => {\n  log(`❌ Uncaught Exception: ${error.message}`);\n  console.error(error.stack);\n  \n  // In production, try to gracefully shutdown instead of immediate exit\n  if (process.env.NODE_ENV === 'production') {\n    setTimeout(() => process.exit(1), 1000);\n  } else {\n    process.exit(1);\n  }\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  log(`❌ Unhandled Rejection at: ${promise}, reason: ${reason}`);\n  console.error('Unhandled Rejection:', reason);\n  \n  // In production, log but don't exit immediately to allow for recovery\n  if (process.env.NODE_ENV === 'production') {\n    log('⚠️  Continuing operation despite unhandled rejection in production');\n  } else {\n    process.exit(1);\n  }\n});\n\n// Graceful shutdown handling\nprocess.on('SIGTERM', () => {\n  log('🛑 SIGTERM received, shutting down gracefully');\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  log('🛑 SIGINT received, shutting down gracefully');\n  process.exit(0);\n});\n","size_bytes":5408},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertGameRoomSchema, insertGameParticipantSchema, insertChatMessageSchema } from \"@shared/schema\";\nimport { gameEngine } from \"./services/game-engine\";\nimport { aiService } from \"./services/ai-service\";\n\ninterface WebSocketWithUser extends WebSocket {\n  userId?: string;\n  roomId?: string;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint with storage validation\n  app.get(\"/api/health\", async (req, res) => {\n    try {\n      const healthCheck = {\n        status: \"ok\",\n        timestamp: new Date().toISOString(),\n        uptime: process.uptime(),\n        environment: process.env.NODE_ENV || \"development\",\n        port: process.env.PORT || \"5000\",\n        version: \"1.0.0\",\n        storage: \"in-memory\",\n        checks: {\n          storage: \"ok\"\n        }\n      };\n\n      // Test storage connectivity by attempting a simple operation\n      try {\n        await storage.getActiveRooms();\n        healthCheck.checks.storage = \"ok\";\n      } catch (error) {\n        healthCheck.status = \"degraded\";\n        healthCheck.checks.storage = \"error\";\n        console.error('Storage health check failed:', error);\n      }\n\n      const statusCode = healthCheck.status === \"ok\" ? 200 : 503;\n      res.status(statusCode).json(healthCheck);\n    } catch (error) {\n      res.status(503).json({\n        status: \"error\",\n        timestamp: new Date().toISOString(),\n        error: \"Health check failed\",\n        message: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // User routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, isGuest } = insertUserSchema.parse(req.body);\n      \n      let user = await storage.getUserByUsername(username);\n      if (!user) {\n        user = await storage.createUser({ username, isGuest: isGuest || false });\n      }\n      \n      res.json({ user });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Room routes\n  app.get(\"/api/rooms\", async (req, res) => {\n    try {\n      const rooms = await storage.getActiveRooms();\n      res.json(rooms);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/rooms\", async (req, res) => {\n    try {\n      const roomData = insertGameRoomSchema.parse(req.body);\n      const { hostId } = req.body;\n      \n      if (!hostId) {\n        return res.status(400).json({ message: \"Host ID is required\" });\n      }\n\n      const room = await storage.createGameRoom({ ...roomData, hostId });\n      \n      // Add host as participant\n      await storage.addParticipant({\n        roomId: room.id,\n        userId: hostId,\n        playerType: \"human\",\n        isSpectator: false\n      });\n\n      res.json(room);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/rooms/:id\", async (req, res) => {\n    try {\n      const room = await storage.getGameRoom(req.params.id);\n      if (!room) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n      \n      const participants = await storage.getParticipantsByRoom(room.id);\n      const gameState = await storage.getGameState(room.id);\n      \n      console.log(`[API] Room ${req.params.id} status: ${room.status}, gameState exists: ${!!gameState}`);\n      \n      res.json({ room, participants, gameState });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/rooms/:id/join\", async (req, res) => {\n    try {\n      const { userId, isSpectator } = req.body;\n      const roomId = req.params.id;\n      \n      const room = await storage.getGameRoom(roomId);\n      if (!room) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n\n      const participants = await storage.getParticipantsByRoom(roomId);\n      const activePlayers = participants.filter(p => !p.isSpectator);\n      \n      if (!isSpectator && activePlayers.length >= room.maxPlayers) {\n        return res.status(400).json({ message: \"Room is full\" });\n      }\n\n      const participant = await storage.addParticipant({\n        roomId,\n        userId,\n        playerType: \"human\",\n        isSpectator: isSpectator || false\n      });\n\n      res.json(participant);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Chat routes\n  app.get(\"/api/rooms/:id/messages\", async (req, res) => {\n    try {\n      const messages = await storage.getChatMessages(req.params.id);\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket setup\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws: WebSocketWithUser) => {\n    console.log('New WebSocket connection');\n\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        console.log(`[WebSocket] Received message:`, message.type, message);\n        \n        switch (message.type) {\n          case 'join_room':\n            try {\n              ws.userId = message.userId;\n              ws.roomId = message.roomId;\n              \n              // Check if room is already playing and send current game state\n              const room = await storage.getGameRoom(message.roomId);\n              if (room && room.status === 'playing') {\n                const gameState = await storage.getGameState(message.roomId);\n                if (gameState) {\n                  console.log(`[WebSocket] Sending current game state to user ${message.userId} joining active game`);\n                  if (ws.readyState === WebSocket.OPEN) {\n                    ws.send(JSON.stringify({\n                      type: 'game_started',\n                      gameData: gameState.gameData\n                    }));\n                  }\n                }\n              }\n              \n              // Broadcast user joined\n              broadcastToRoom(ws.roomId!, {\n                type: 'user_joined',\n                userId: message.userId,\n                timestamp: new Date().toISOString()\n              });\n            } catch (error) {\n              console.error('[WebSocket] Error in join_room:', error);\n              if (ws.readyState === WebSocket.OPEN) {\n                ws.send(JSON.stringify({\n                  type: 'error',\n                  message: 'Failed to join room'\n                }));\n              }\n            }\n            break;\n\n          case 'leave_room':\n            if (ws.roomId) {\n              broadcastToRoom(ws.roomId, {\n                type: 'user_left',\n                userId: ws.userId,\n                timestamp: new Date().toISOString()\n              });\n            }\n            ws.roomId = undefined;\n            break;\n\n          case 'chat_message':\n            try {\n              if (ws.roomId && ws.userId) {\n                const chatMessage = await storage.addChatMessage({\n                  roomId: ws.roomId,\n                  userId: ws.userId,\n                  message: message.message\n                });\n\n                broadcastToRoom(ws.roomId, {\n                  type: 'chat_message',\n                  message: chatMessage\n                });\n              }\n            } catch (error) {\n              console.error('[WebSocket] Error in chat_message:', error);\n              if (ws.readyState === WebSocket.OPEN) {\n                ws.send(JSON.stringify({\n                  type: 'error',\n                  message: 'Failed to send chat message'\n                }));\n              }\n            }\n            break;\n\n          case 'game_action':\n            try {\n              if (ws.roomId && ws.userId) {\n                const room = await storage.getGameRoom(ws.roomId);\n                const participants = await storage.getParticipantsByRoom(ws.roomId);\n                const currentParticipant = participants.find(p => p.userId === ws.userId);\n                \n                if (room && currentParticipant) {\n                  if (message.action === 'forfeit') {\n                    // End game with forfeit\n                    await storage.updateGameRoom(ws.roomId, { status: \"finished\" });\n                    \n                    broadcastToRoom(ws.roomId, {\n                      type: 'game_ended',\n                      reason: `Player forfeited the game`,\n                      winner: participants.find(p => p.id !== currentParticipant.id && !p.isSpectator)?.userId\n                    });\n                    \n                  } else if (message.action === 'draw_offer') {\n                    // Broadcast draw offer to other players\n                    broadcastToRoom(ws.roomId, {\n                      type: 'draw_offer',\n                      fromPlayer: currentParticipant.userId,\n                      message: `Player offers a draw`\n                    });\n                  }\n                }\n              }\n            } catch (error) {\n              console.error('[WebSocket] Error in game_action:', error);\n              if (ws.readyState === WebSocket.OPEN) {\n                ws.send(JSON.stringify({\n                  type: 'error',\n                  message: 'Failed to process game action'\n                }));\n              }\n            }\n            break;\n\n          case 'ready_toggle':\n            if (ws.roomId && ws.userId) {\n              const participants = await storage.getParticipantsByRoom(ws.roomId);\n              const participant = participants.find(p => p.userId === ws.userId);\n              \n              if (participant) {\n                await storage.updateParticipant(participant.id, {\n                  isReady: !participant.isReady\n                });\n\n                broadcastToRoom(ws.roomId, {\n                  type: 'participant_updated',\n                  participantId: participant.id,\n                  isReady: !participant.isReady\n                });\n              }\n            }\n            break;\n\n          case 'start_game':\n            if (ws.roomId && ws.userId) {\n              console.log(`[WebSocket] start_game received from user ${ws.userId} in room ${ws.roomId}`);\n              const room = await storage.getGameRoom(ws.roomId);\n              if (room && room.hostId === ws.userId) {\n                const participants = await storage.getParticipantsByRoom(ws.roomId);\n                const activePlayers = participants.filter(p => !p.isSpectator);\n                const readyPlayers = activePlayers.filter(p => p.isReady);\n                const allReady = activePlayers.every(p => p.isReady);\n                \n                console.log(`[WebSocket] Players: ${activePlayers.length}, Ready: ${readyPlayers.length}, All Ready: ${allReady}`);\n                \n                if (allReady) {\n                  console.log(`[WebSocket] Starting game of type: ${room.gameType}`);\n                  // Initialize game state\n                  const initialGameData = gameEngine.initializeGame(room.gameType as any, participants);\n                  console.log(`[WebSocket] Game data initialized:`, JSON.stringify(initialGameData, null, 2));\n                  \n                  // Set currentTurn to first non-spectator participant ID\n                  const nonSpectatorParticipants = participants.filter(p => !p.isSpectator);\n                  const currentTurnParticipantId = nonSpectatorParticipants[initialGameData.turn || 0]?.id;\n                  \n                  initialGameData.currentTurn = currentTurnParticipantId;\n                  initialGameData.playerColors = {};\n                  \n                  // Assign player colors based on game type\n                  if (room.gameType === 'chess') {\n                    initialGameData.playerColors[nonSpectatorParticipants[0]?.id] = 'white';\n                    initialGameData.playerColors[nonSpectatorParticipants[1]?.id] = 'black';\n                  } else if (room.gameType === 'checkers') {\n                    initialGameData.playerColors[nonSpectatorParticipants[0]?.id] = 'red';\n                    initialGameData.playerColors[nonSpectatorParticipants[1]?.id] = 'black';\n                  }\n                  \n                  await storage.createGameState({\n                    roomId: ws.roomId,\n                    gameData: initialGameData,\n                    currentTurn: currentTurnParticipantId\n                  });\n\n                  await storage.updateGameRoom(ws.roomId, { status: \"playing\" });\n\n                  const gameStartMessage = {\n                    type: 'game_started',\n                    gameData: initialGameData\n                  };\n                  \n                  console.log(`[WebSocket] Broadcasting game_started to room ${ws.roomId}`);\n                  broadcastToRoom(ws.roomId, gameStartMessage);\n                } else {\n                  console.log(`[WebSocket] Cannot start game - not all players ready. Active: ${activePlayers.length}, Ready: ${readyPlayers.length}`);\n                  ws.send(JSON.stringify({\n                    type: 'error',\n                    message: 'Not all players are ready'\n                  }));\n                }\n              } else {\n                console.log(`[WebSocket] Cannot start game - not host or room not found`);\n                ws.send(JSON.stringify({\n                  type: 'error',\n                  message: 'Only the host can start the game'\n                }));\n              }\n            }\n            break;\n\n          case 'game_move':\n            if (ws.roomId && ws.userId) {\n              const gameState = await storage.getGameState(ws.roomId);\n              const room = await storage.getGameRoom(ws.roomId);\n              \n              if (gameState && room) {\n                const participants = await storage.getParticipantsByRoom(ws.roomId);\n                const currentParticipant = participants.find(p => p.userId === ws.userId);\n                \n                if (currentParticipant && gameState.currentTurn === currentParticipant.id) {\n                  const newGameData = gameEngine.processMove(\n                    room.gameType as any,\n                    gameState.gameData as any,\n                    message.move,\n                    currentParticipant.id,\n                    participants\n                  );\n                  \n                  await storage.updateGameState(ws.roomId, {\n                    gameData: newGameData,\n                    currentTurn: newGameData.currentTurn,\n                    turnNumber: gameState.turnNumber! + 1\n                  });\n\n                  broadcastToRoom(ws.roomId, {\n                    type: 'game_updated',\n                    gameData: newGameData,\n                    currentTurn: newGameData.currentTurn,\n                    move: message.move\n                  });\n\n                  // Handle bot turns\n                  if (newGameData.currentTurn) {\n                    const nextParticipant = participants.find(p => p.id === newGameData.currentTurn);\n                    if (nextParticipant?.playerType === 'bot') {\n                      setTimeout(async () => {\n                        try {\n                          const botMove = await aiService.getBotMove(room.gameType as any, newGameData, (nextParticipant.botDifficulty as any) || 'medium');\n\n                          if (botMove) {\n                            const botGameData = gameEngine.processMove(\n                              room.gameType as any,\n                              newGameData,\n                              botMove,\n                              nextParticipant.id,\n                              participants\n                            );\n\n                            await storage.updateGameState(ws.roomId!, {\n                              gameData: botGameData,\n                              currentTurn: botGameData.currentTurn,\n                              turnNumber: gameState.turnNumber! + 2\n                            });\n\n                            broadcastToRoom(ws.roomId!, {\n                              type: 'game_updated',\n                              gameData: botGameData,\n                              currentTurn: botGameData.currentTurn,\n                              move: botMove\n                            });\n                          }\n                        } catch (error) {\n                          console.error('[WebSocket] Error in bot move processing:', error);\n                        }\n                      }, 1000 + Math.random() * 2000); // 1-3 second delay for bot move\n                    }\n                  }\n                }\n              }\n            }\n            break;\n            \n          case 'rematch_request':\n            try {\n              if (ws.roomId && ws.userId) {\n                const room = await storage.getGameRoom(ws.roomId);\n                if (room) {\n                  // Reset room status to waiting\n                  await storage.updateGameRoom(ws.roomId, { status: 'waiting' });\n                  \n                  // Reset existing game state\n                  const existingGameState = await storage.getGameState(ws.roomId);\n                  if (existingGameState) {\n                    // For now, just don't delete since method doesn't exist - the new game will overwrite it\n                  }\n                  \n                  // Reset all participants to not ready\n                  const participants = await storage.getParticipantsByRoom(ws.roomId);\n                  for (const participant of participants) {\n                    await storage.updateParticipant(participant.id, { isReady: false });\n                  }\n                  \n                  // Broadcast rematch started to all room participants\n                  broadcastToRoom(ws.roomId, {\n                    type: 'rematch_started',\n                    roomId: ws.roomId,\n                    timestamp: new Date().toISOString()\n                  });\n                }\n              }\n            } catch (error) {\n              console.error('[WebSocket] Error in rematch_request:', error);\n              if (ws.readyState === WebSocket.OPEN) {\n                ws.send(JSON.stringify({\n                  type: 'error',\n                  message: 'Failed to start rematch'\n                }));\n              }\n            }\n            break;\n            \n          case 'change_game_type':\n            try {\n              if (ws.roomId && ws.userId) {\n                const room = await storage.getGameRoom(ws.roomId);\n                if (room && room.hostId === ws.userId) {\n                  // Only host can change game type\n                  const updateData: any = { gameType: message.gameType };\n                  if (message.maxPlayers) {\n                    updateData.maxPlayers = message.maxPlayers;\n                  }\n                  \n                  await storage.updateGameRoom(ws.roomId, updateData);\n                  \n                  // Broadcast game type change to all room participants\n                  broadcastToRoom(ws.roomId, {\n                    type: 'game_type_changed',\n                    gameType: message.gameType,\n                    maxPlayers: message.maxPlayers,\n                    timestamp: new Date().toISOString()\n                  });\n                  \n                  console.log(`[WebSocket] Game type changed to ${message.gameType} with maxPlayers ${message.maxPlayers} by host ${ws.userId}`);\n                } else {\n                  // Send error if not host\n                  if (ws.readyState === WebSocket.OPEN) {\n                    ws.send(JSON.stringify({\n                      type: 'error',\n                      message: 'Only the host can change the game type'\n                    }));\n                  }\n                }\n              }\n            } catch (error) {\n              console.error('[WebSocket] Error in change_game_type:', error);\n              if (ws.readyState === WebSocket.OPEN) {\n                ws.send(JSON.stringify({\n                  type: 'error',\n                  message: 'Failed to change game type'\n                }));\n              }\n            }\n            break;\n\n          case 'move_player':\n            try {\n              if (ws.roomId && ws.userId) {\n                const room = await storage.getGameRoom(ws.roomId);\n                if (room && room.hostId === ws.userId) {\n                  // Only host can move players\n                  const participantId = message.participantId;\n                  const toSpectator = message.toSpectator;\n                  \n                  await storage.updateParticipant(participantId, {\n                    isSpectator: toSpectator\n                  });\n                  \n                  // Broadcast player move to all room participants\n                  broadcastToRoom(ws.roomId, {\n                    type: 'player_moved',\n                    participantId: participantId,\n                    toSpectator: toSpectator,\n                    timestamp: new Date().toISOString()\n                  });\n                  \n                  console.log(`[WebSocket] Player ${participantId} moved to ${toSpectator ? 'spectator' : 'player'} by host ${ws.userId}`);\n                } else {\n                  // Send error if not host\n                  if (ws.readyState === WebSocket.OPEN) {\n                    ws.send(JSON.stringify({\n                      type: 'error',\n                      message: 'Only the host can move players'\n                    }));\n                  }\n                }\n              }\n            } catch (error) {\n              console.error('[WebSocket] Error in move_player:', error);\n              if (ws.readyState === WebSocket.OPEN) {\n                ws.send(JSON.stringify({\n                  type: 'error',\n                  message: 'Failed to move player'\n                }));\n              }\n            }\n            break;\n        }\n      } catch (error: any) {\n        console.error('WebSocket message error:', error);\n        console.error('Raw message data:', data.toString());\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: `Invalid message format: ${error.message}`\n        }));\n      }\n    });\n\n    ws.on('close', () => {\n      try {\n        if (ws.roomId) {\n          broadcastToRoom(ws.roomId, {\n            type: 'user_left',\n            userId: ws.userId,\n            timestamp: new Date().toISOString()\n          });\n        }\n      } catch (error) {\n        console.error('[WebSocket] Error in close handler:', error);\n      }\n    });\n\n    ws.on('error', (error) => {\n      console.error('[WebSocket] Connection error:', error);\n    });\n  });\n\n  function broadcastToRoom(roomId: string, message: any) {\n    wss.clients.forEach((client: WebSocketWithUser) => {\n      try {\n        if (client.roomId === roomId && client.readyState === WebSocket.OPEN) {\n          client.send(JSON.stringify(message));\n        }\n      } catch (error) {\n        console.error('Error broadcasting to client:', error);\n        // Remove the client if sending fails\n        try {\n          client.terminate();\n        } catch (terminateError) {\n          console.error('Error terminating client:', terminateError);\n        }\n      }\n    });\n  }\n\n  return httpServer;\n}\n","size_bytes":23593},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type GameRoom,\n  type InsertGameRoom,\n  type GameParticipant,\n  type InsertGameParticipant,\n  type GameState,\n  type InsertGameState,\n  type ChatMessage,\n  type InsertChatMessage,\n  type GameType,\n  type GameMode,\n  type RoomStatus\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Game room methods\n  getGameRoom(id: string): Promise<GameRoom | undefined>;\n  createGameRoom(room: InsertGameRoom & { hostId: string }): Promise<GameRoom>;\n  updateGameRoom(id: string, updates: Partial<GameRoom>): Promise<GameRoom | undefined>;\n  getActiveRooms(): Promise<GameRoom[]>;\n  getRoomsByGameType(gameType: GameType): Promise<GameRoom[]>;\n\n  // Game participant methods\n  getParticipantsByRoom(roomId: string): Promise<GameParticipant[]>;\n  addParticipant(participant: InsertGameParticipant): Promise<GameParticipant>;\n  updateParticipant(id: string, updates: Partial<GameParticipant>): Promise<GameParticipant | undefined>;\n  removeParticipant(id: string): Promise<void>;\n\n  // Game state methods\n  getGameState(roomId: string): Promise<GameState | undefined>;\n  createGameState(state: InsertGameState): Promise<GameState>;\n  updateGameState(roomId: string, updates: Partial<GameState>): Promise<GameState | undefined>;\n\n  // Chat methods\n  getChatMessages(roomId: string): Promise<ChatMessage[]>;\n  addChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private gameRooms: Map<string, GameRoom>;\n  private gameParticipants: Map<string, GameParticipant>;\n  private gameStates: Map<string, GameState>;\n  private chatMessages: Map<string, ChatMessage>;\n\n  constructor() {\n    this.users = new Map();\n    this.gameRooms = new Map();\n    this.gameParticipants = new Map();\n    this.gameStates = new Map();\n    this.chatMessages = new Map();\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      isGuest: insertUser.isGuest || false,\n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Game room methods\n  async getGameRoom(id: string): Promise<GameRoom | undefined> {\n    return this.gameRooms.get(id);\n  }\n\n  async createGameRoom(room: InsertGameRoom & { hostId: string }): Promise<GameRoom> {\n    const id = randomUUID();\n    const gameRoom: GameRoom = {\n      ...room,\n      id,\n      status: \"waiting\" as RoomStatus,\n      maxPlayers: room.maxPlayers || 4,\n      settings: room.settings || {},\n      isPrivate: room.isPrivate || false,\n      allowSpectators: room.allowSpectators || true,\n      enableChat: room.enableChat || true,\n      createdAt: new Date()\n    };\n    this.gameRooms.set(id, gameRoom);\n    return gameRoom;\n  }\n\n  async updateGameRoom(id: string, updates: Partial<GameRoom>): Promise<GameRoom | undefined> {\n    const room = this.gameRooms.get(id);\n    if (!room) return undefined;\n    \n    const updatedRoom = { ...room, ...updates };\n    this.gameRooms.set(id, updatedRoom);\n    return updatedRoom;\n  }\n\n  async getActiveRooms(): Promise<GameRoom[]> {\n    return Array.from(this.gameRooms.values())\n      .filter(room => room.status === \"waiting\" || room.status === \"playing\");\n  }\n\n  async getRoomsByGameType(gameType: GameType): Promise<GameRoom[]> {\n    return Array.from(this.gameRooms.values())\n      .filter(room => room.gameType === gameType && room.status === \"waiting\");\n  }\n\n  // Game participant methods\n  async getParticipantsByRoom(roomId: string): Promise<GameParticipant[]> {\n    return Array.from(this.gameParticipants.values())\n      .filter(participant => participant.roomId === roomId);\n  }\n\n  async addParticipant(participant: InsertGameParticipant): Promise<GameParticipant> {\n    const id = randomUUID();\n    const gameParticipant: GameParticipant = {\n      ...participant,\n      id,\n      userId: participant.userId || null,\n      botDifficulty: participant.botDifficulty || null,\n      isReady: false,\n      isSpectator: participant.isSpectator || false,\n      joinedAt: new Date()\n    };\n    this.gameParticipants.set(id, gameParticipant);\n    return gameParticipant;\n  }\n\n  async updateParticipant(id: string, updates: Partial<GameParticipant>): Promise<GameParticipant | undefined> {\n    const participant = this.gameParticipants.get(id);\n    if (!participant) return undefined;\n\n    const updatedParticipant = { ...participant, ...updates };\n    this.gameParticipants.set(id, updatedParticipant);\n    return updatedParticipant;\n  }\n\n  async removeParticipant(id: string): Promise<void> {\n    this.gameParticipants.delete(id);\n  }\n\n  // Game state methods\n  async getGameState(roomId: string): Promise<GameState | undefined> {\n    return Array.from(this.gameStates.values())\n      .find(state => state.roomId === roomId);\n  }\n\n  async createGameState(state: InsertGameState): Promise<GameState> {\n    const id = randomUUID();\n    const gameState: GameState = {\n      ...state,\n      id,\n      currentTurn: state.currentTurn || null,\n      turnNumber: 1,\n      startedAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.gameStates.set(id, gameState);\n    return gameState;\n  }\n\n  async updateGameState(roomId: string, updates: Partial<GameState>): Promise<GameState | undefined> {\n    const existingState = await this.getGameState(roomId);\n    if (!existingState) return undefined;\n\n    const updatedState = { \n      ...existingState, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.gameStates.set(existingState.id, updatedState);\n    return updatedState;\n  }\n\n  // Chat methods\n  async getChatMessages(roomId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(message => message.roomId === roomId)\n      .sort((a, b) => a.sentAt!.getTime() - b.sentAt!.getTime());\n  }\n\n  async addChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const chatMessage: ChatMessage = {\n      ...message,\n      id,\n      userId: message.userId || null,\n      messageType: message.messageType || \"user\",\n      sentAt: new Date()\n    };\n    this.chatMessages.set(id, chatMessage);\n    return chatMessage;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6781},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  isGuest: boolean(\"is_guest\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const gameRooms = pgTable(\"game_rooms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  gameType: text(\"game_type\").notNull(),\n  maxPlayers: integer(\"max_players\").notNull().default(2),\n  hostId: varchar(\"host_id\").notNull().references(() => users.id),\n  gameMode: text(\"game_mode\").notNull(), // 'online' | 'local' | 'bots'\n  settings: jsonb(\"settings\").default({}),\n  isPrivate: boolean(\"is_private\").default(false),\n  allowSpectators: boolean(\"allow_spectators\").default(true),\n  enableChat: boolean(\"enable_chat\").default(true),\n  status: text(\"status\").notNull().default(\"waiting\"), // 'waiting' | 'playing' | 'finished'\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const gameParticipants = pgTable(\"game_participants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").notNull().references(() => gameRooms.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  playerType: text(\"player_type\").notNull(), // 'human' | 'bot'\n  botDifficulty: text(\"bot_difficulty\"), // 'easy' | 'medium' | 'hard'\n  isReady: boolean(\"is_ready\").default(false),\n  isSpectator: boolean(\"is_spectator\").default(false),\n  joinedAt: timestamp(\"joined_at\").default(sql`now()`),\n});\n\nexport const gameStates = pgTable(\"game_states\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").notNull().references(() => gameRooms.id),\n  gameData: jsonb(\"game_data\").notNull(),\n  currentTurn: varchar(\"current_turn\"),\n  turnNumber: integer(\"turn_number\").default(1),\n  startedAt: timestamp(\"started_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").notNull().references(() => gameRooms.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  message: text(\"message\").notNull(),\n  messageType: text(\"message_type\").default(\"user\"), // 'user' | 'system'\n  sentAt: timestamp(\"sent_at\").default(sql`now()`),\n});\n\n// Insert Schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  isGuest: true,\n});\n\nexport const insertGameRoomSchema = createInsertSchema(gameRooms).pick({\n  name: true,\n  gameType: true,\n  maxPlayers: true,\n  gameMode: true,\n  settings: true,\n  isPrivate: true,\n  allowSpectators: true,\n  enableChat: true,\n});\n\nexport const insertGameParticipantSchema = createInsertSchema(gameParticipants).pick({\n  roomId: true,\n  userId: true,\n  playerType: true,\n  botDifficulty: true,\n  isSpectator: true,\n});\n\nexport const insertGameStateSchema = createInsertSchema(gameStates).pick({\n  roomId: true,\n  gameData: true,\n  currentTurn: true,\n  turnNumber: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).pick({\n  roomId: true,\n  userId: true,\n  message: true,\n  messageType: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type GameRoom = typeof gameRooms.$inferSelect;\nexport type InsertGameRoom = z.infer<typeof insertGameRoomSchema>;\n\nexport type GameParticipant = typeof gameParticipants.$inferSelect;\nexport type InsertGameParticipant = z.infer<typeof insertGameParticipantSchema>;\n\nexport type GameState = typeof gameStates.$inferSelect;\nexport type InsertGameState = z.infer<typeof insertGameStateSchema>;\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\n// Game Types\nexport type GameType = 'chess' | 'hearts' | 'checkers' | 'crazy8s' | 'spades' | 'gofish';\nexport type GameMode = 'online' | 'local' | 'bots';\nexport type PlayerType = 'human' | 'bot';\nexport type BotDifficulty = 'easy' | 'medium' | 'hard';\nexport type RoomStatus = 'waiting' | 'playing' | 'finished';\n","size_bytes":4449},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useEffect, useState } from \"react\";\nimport Login from \"@/pages/login\";\nimport MainHub from \"@/pages/main-hub\";\nimport JoinRooms from \"@/pages/join-rooms\";\nimport GameLobby from \"@/pages/game-lobby\";\nimport GameRoom from \"@/pages/game-room\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Login} />\n      <Route path=\"/hub\" component={MainHub} />\n      <Route path=\"/join\" component={JoinRooms} />\n      <Route path=\"/lobby/:roomId\" component={GameLobby} />\n      <Route path=\"/game/:roomId\" component={GameRoom} />\n      <Route>\n        <div className=\"min-h-screen gradient-bg flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-white mb-4\">Page Not Found</h1>\n            <p className=\"text-gray-400\">The page you're looking for doesn't exist.</p>\n          </div>\n        </div>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [isDark, setIsDark] = useState(true);\n\n  useEffect(() => {\n    document.documentElement.classList.toggle(\"dark\", isDark);\n  }, [isDark]);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1558},"client/src/index.css":{"content":"@import url(\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\");\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Game Hub Colors */\n  --game-dark: hsl(220.9 39.3% 11%);\n  --game-navy: hsl(215.4 16.3% 16.9%);\n  --game-slate: hsl(215.3 13.8% 34.1%);\n  --game-blue: hsl(217.2 91.2% 59.8%);\n  --game-emerald: hsl(158.1 64.4% 51.6%);\n  --game-text: hsl(210 40% 98%);\n}\n\n.dark {\n  --background: hsl(220.9 39.3% 11%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(215.4 16.3% 16.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(220.9 39.3% 11%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(215.3 13.8% 34.1%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(215.3 13.8% 34.1%);\n  --muted-foreground: hsl(217.9 10.6% 64.9%);\n  --accent: hsl(215.4 16.3% 16.9%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(215.4 16.3% 16.9%);\n  --input: hsl(215.4 16.3% 16.9%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --sidebar: hsl(215.4 16.3% 16.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(215.3 13.8% 34.1%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(215.4 16.3% 16.9%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 2px 4px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 4px 6px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 8px 10px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    background: var(--game-dark);\n    color: var(--game-text);\n    font-family: var(--font-sans);\n  }\n}\n\n.glass-effect {\n  backdrop-filter: blur(10px);\n  background: hsl(215.3 13.8% 34.1% / 0.8);\n}\n\n.gradient-bg {\n  background: linear-gradient(135deg, var(--game-dark) 0%, var(--game-navy) 100%);\n}\n\n/* Game specific styles */\n.game-card {\n  background: hsl(var(--game-navy) / 0.5);\n  backdrop-filter: blur(4px);\n  @apply rounded-xl border border-gray-700/50 transition-all duration-200 cursor-pointer;\n}\n\n.game-card:hover {\n  transform: translateY(-2px);\n}\n\n.game-button {\n  background: linear-gradient(to right, hsl(var(--game-blue)), hsl(217 91% 60%));\n  @apply text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-[1.02];\n}\n\n.game-button-secondary {\n  @apply bg-gray-600/50 text-gray-300 font-semibold py-3 px-6 rounded-lg hover:bg-gray-600/70 transition-all duration-200 border border-gray-600;\n}\n\n.connection-indicator {\n  @apply flex items-center space-x-2;\n}\n\n.connection-indicator.online .dot {\n  @apply w-2 h-2 bg-green-500 rounded-full animate-pulse;\n}\n\n.connection-indicator.offline .dot {\n  @apply w-2 h-2 bg-red-500 rounded-full;\n}\n\n.player-avatar {\n  @apply w-12 h-12 rounded-full flex items-center justify-center text-white font-bold;\n}\n\n.chat-message {\n  @apply text-sm;\n}\n\n.chat-message .sender {\n  @apply font-medium;\n}\n\n.chat-message .text {\n  @apply text-gray-300 ml-2;\n}\n\n/* Drag and drop enhancements */\n.dragging {\n  @apply cursor-grabbing;\n}\n\n.drag-preview {\n  @apply transform rotate-6 scale-110 opacity-75;\n}\n\n/* Touch-friendly game pieces */\n@media (hover: none) and (pointer: coarse) {\n  [draggable=\"true\"] {\n    @apply touch-none;\n  }\n  \n  .game-board-square {\n    @apply min-h-[3rem] min-w-[3rem];\n  }\n  \n  .chess-piece, .checkers-piece {\n    @apply transform scale-110;\n  }\n}\n\n/* Game board improvements */\n.game-board {\n  @apply touch-none select-none transition-all duration-300;\n}\n\n.game-board.loading {\n  @apply opacity-50 pointer-events-none;\n}\n\n.game-square {\n  @apply transition-all duration-200 ease-in-out;\n}\n\n.game-square:hover {\n  @apply transform scale-105 brightness-110;\n}\n\n.game-square.highlighted {\n  @apply ring-2 ring-yellow-400 ring-opacity-75;\n  animation: pulse 2s ease-in-out infinite;\n}\n\n.game-piece {\n  @apply transition-all duration-200 ease-in-out;\n}\n\n.game-piece:active {\n  @apply scale-95;\n}\n\n.game-piece.dragging {\n  @apply opacity-50 scale-110 z-50;\n}\n\n/* Loading states and animations */\n@keyframes pulse-slow {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.3; }\n}\n\n@keyframes spin-slow {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n@keyframes bounce-subtle {\n  0%, 20%, 53%, 80%, 100% {\n    transform: translate3d(0, 0, 0);\n  }\n  40%, 43% {\n    transform: translate3d(0, -8px, 0);\n  }\n  70% {\n    transform: translate3d(0, -4px, 0);\n  }\n  90% {\n    transform: translate3d(0, -2px, 0);\n  }\n}\n\n.loading-pulse {\n  animation: pulse-slow 2s ease-in-out infinite;\n}\n\n.loading-spin {\n  animation: spin-slow 1s linear infinite;\n}\n\n.loading-bounce {\n  animation: bounce-subtle 1s ease-in-out infinite;\n}\n\n/* Skeleton loading states */\n.skeleton {\n  @apply bg-gray-600/30 animate-pulse rounded;\n}\n\n.skeleton-text {\n  @apply h-4 bg-gray-600/30 animate-pulse rounded;\n}\n\n.skeleton-avatar {\n  @apply w-8 h-8 bg-gray-600/30 animate-pulse rounded-full;\n}\n\n/* Enhanced error states */\n.error-shake {\n  animation: shake 0.5s ease-in-out;\n}\n\n@keyframes shake {\n  0%, 100% { transform: translateX(0); }\n  25% { transform: translateX(-5px); }\n  75% { transform: translateX(5px); }\n}\n\n/* Connection status animations */\n.connection-pulse {\n  animation: pulse 2s ease-in-out infinite;\n}\n\n.connection-reconnecting {\n  animation: pulse 1s ease-in-out infinite;\n}\n\n/* Game piece selection highlight */\n.piece-selected {\n  @apply ring-4 ring-blue-400 ring-opacity-75;\n  animation: pulse 1s ease-in-out infinite;\n}\n\n.piece-valid-move {\n  @apply ring-2 ring-green-400 ring-opacity-50;\n  background: radial-gradient(circle, rgba(34, 197, 94, 0.2) 0%, transparent 50%);\n}\n\n/* Toast notification improvements */\n.toast-success {\n  @apply border-green-500/50 bg-green-950/90;\n}\n\n.toast-error {\n  @apply border-red-500/50 bg-red-950/90;\n  animation: shake 0.3s ease-in-out;\n}\n\n.toast-info {\n  @apply border-blue-500/50 bg-blue-950/90;\n}\n\n/* Chess board styling */\n.chess-light-square {\n  background-color: #f0d9b5;\n}\n\n.chess-dark-square {\n  background-color: #b58863;\n}\n\n/* Chess piece contrast improvements */\n.chess-piece {\n  font-weight: bold;\n  font-size: 1.5rem;\n  transition: all 0.2s ease-in-out;\n}\n\n.chess-piece:hover {\n  transform: scale(1.1);\n}\n\n.chess-piece.white-piece {\n  color: #ffffff;\n  text-shadow: \n    -2px -2px 0 #000,\n    2px -2px 0 #000,\n    -2px 2px 0 #000,\n    2px 2px 0 #000,\n    -3px 0 0 #000,\n    3px 0 0 #000,\n    0 -3px 0 #000,\n    0 3px 0 #000;\n  filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.9)) drop-shadow(-1px -1px 1px rgba(0,0,0,0.5));\n  background: linear-gradient(45deg, #ffffff, #f5f5f5);\n  -webkit-background-clip: text;\n  background-clip: text;\n}\n\n.chess-piece.black-piece {\n  color: #1a1a1a;\n  text-shadow: \n    -1px -1px 0 #fff,\n    1px -1px 0 #fff,\n    -1px 1px 0 #fff,\n    1px 1px 0 #fff;\n  filter: drop-shadow(1px 1px 2px rgba(255,255,255,0.4));\n}\n","size_bytes":10362},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/ai-service.ts":{"content":"import type { GameType, BotDifficulty } from \"@shared/schema\";\nimport type { GameData, GameMove } from \"./game-engine\";\n\nclass AIService {\n  async getBotMove(gameType: GameType, gameData: GameData, difficulty: BotDifficulty): Promise<GameMove | null> {\n    switch (gameType) {\n      case 'chess':\n        return this.getChessBotMove(gameData, difficulty);\n      case 'checkers':\n        return this.getCheckersBotMove(gameData, difficulty);\n      case 'hearts':\n        return this.getHeartsBotMove(gameData, difficulty);\n      case 'spades':\n        return this.getSpadesBotMove(gameData, difficulty);\n      case 'crazy8s':\n        return this.getCrazy8sBotMove(gameData, difficulty);\n      case 'gofish':\n        return this.getGoFishBotMove(gameData, difficulty);\n      default:\n        return null;\n    }\n  }\n\n  private async getChessBotMove(gameData: GameData, difficulty: BotDifficulty): Promise<GameMove | null> {\n    // Simplified chess AI - find all valid moves and pick one\n    const validMoves = this.getValidChessMoves(gameData);\n    \n    if (validMoves.length === 0) return null;\n    \n    switch (difficulty) {\n      case 'easy':\n        // Random move\n        return validMoves[Math.floor(Math.random() * validMoves.length)];\n      case 'medium':\n        // Prefer captures\n        const captures = validMoves.filter(move => this.isCapture(gameData, move));\n        return captures.length > 0 \n          ? captures[Math.floor(Math.random() * captures.length)]\n          : validMoves[Math.floor(Math.random() * validMoves.length)];\n      case 'hard':\n        // Simple evaluation function\n        return this.evaluateChessMoves(gameData, validMoves);\n      default:\n        return validMoves[Math.floor(Math.random() * validMoves.length)];\n    }\n  }\n\n  private async getCheckersBotMove(gameData: GameData, difficulty: BotDifficulty): Promise<GameMove | null> {\n    const validMoves = this.getValidCheckersMove(gameData);\n    \n    if (validMoves.length === 0) return null;\n    \n    switch (difficulty) {\n      case 'easy':\n        return validMoves[Math.floor(Math.random() * validMoves.length)];\n      case 'medium':\n        // Prefer captures\n        const captures = validMoves.filter(move => move.data.captures && move.data.captures.length > 0);\n        return captures.length > 0 \n          ? captures[Math.floor(Math.random() * captures.length)]\n          : validMoves[Math.floor(Math.random() * validMoves.length)];\n      case 'hard':\n        // Minimax-like evaluation\n        return this.evaluateCheckersMoves(gameData, validMoves);\n      default:\n        return validMoves[Math.floor(Math.random() * validMoves.length)];\n    }\n  }\n\n  private async getHeartsBotMove(gameData: GameData, difficulty: BotDifficulty): Promise<GameMove | null> {\n    // Simplified Hearts AI\n    const currentPlayerId = gameData.players[gameData.turn!];\n    const hand = gameData.hands[currentPlayerId];\n    \n    if (!hand || hand.length === 0) return null;\n    \n    // Basic strategy: avoid hearts and queen of spades\n    const safeCards = hand.filter((card: string) => !card.includes('♥') && card !== 'Q♠');\n    \n    switch (difficulty) {\n      case 'easy':\n        return {\n          type: 'play_card',\n          data: { card: hand[Math.floor(Math.random() * hand.length)] }\n        };\n      case 'medium':\n        const cardToPlay = safeCards.length > 0 \n          ? safeCards[Math.floor(Math.random() * safeCards.length)]\n          : hand[Math.floor(Math.random() * hand.length)];\n        return {\n          type: 'play_card',\n          data: { card: cardToPlay }\n        };\n      case 'hard':\n        // More sophisticated Hearts strategy\n        return this.evaluateHeartsMove(gameData, hand);\n      default:\n        return {\n          type: 'play_card',\n          data: { card: hand[Math.floor(Math.random() * hand.length)] }\n        };\n    }\n  }\n\n  private async getSpadesBotMove(gameData: GameData, difficulty: BotDifficulty): Promise<GameMove | null> {\n    if (gameData.phase === 'bidding') {\n      const currentPlayerId = gameData.players[gameData.turn!];\n      const hand = gameData.hands[currentPlayerId];\n      \n      // Simple bidding strategy\n      const spades = hand.filter((card: string) => card.includes('♠')).length;\n      const honors = hand.filter((card: string) => ['A', 'K', 'Q', 'J'].some(rank => card.startsWith(rank))).length;\n      \n      let bid = Math.max(1, Math.floor(spades / 2) + Math.floor(honors / 3));\n      \n      if (difficulty === 'easy') {\n        bid += Math.floor(Math.random() * 3) - 1; // ±1 randomness\n      }\n      \n      return {\n        type: 'bid',\n        data: { bid: Math.max(0, Math.min(13, bid)) }\n      };\n    }\n    \n    // Card play logic\n    const currentPlayerId = gameData.players[gameData.turn!];\n    const hand = gameData.hands[currentPlayerId];\n    \n    return {\n      type: 'play_card',\n      data: { card: hand[Math.floor(Math.random() * hand.length)] }\n    };\n  }\n\n  private async getCrazy8sBotMove(gameData: GameData, difficulty: BotDifficulty): Promise<GameMove | null> {\n    const currentPlayerId = gameData.players[gameData.turn!];\n    const hand = gameData.hands[currentPlayerId];\n    const topCard = gameData.discardPile[gameData.discardPile.length - 1];\n    \n    // Find playable cards\n    const playableCards = hand.filter((card: string) => {\n      if (card.startsWith('8')) return true;\n      \n      const topSuit = gameData.currentSuit || topCard.slice(-1);\n      const topRank = topCard.slice(0, -1);\n      \n      return card.slice(-1) === topSuit || card.slice(0, -1) === topRank;\n    });\n    \n    if (playableCards.length > 0) {\n      const cardToPlay = playableCards[Math.floor(Math.random() * playableCards.length)];\n      \n      // If playing an 8, choose a suit\n      let newSuit = null;\n      if (cardToPlay.startsWith('8')) {\n        const suits = ['♠', '♥', '♦', '♣'];\n        const suitCounts = suits.map(suit => \n          hand.filter((card: string) => card.slice(-1) === suit).length\n        );\n        const maxCount = Math.max(...suitCounts);\n        const bestSuits = suits.filter((_, i) => suitCounts[i] === maxCount);\n        newSuit = bestSuits[Math.floor(Math.random() * bestSuits.length)];\n      }\n      \n      return {\n        type: 'play_card',\n        data: { card: cardToPlay, newSuit }\n      };\n    }\n    \n    // Must draw a card\n    return {\n      type: 'draw_card',\n      data: {}\n    };\n  }\n\n  private async getGoFishBotMove(gameData: GameData, difficulty: BotDifficulty): Promise<GameMove | null> {\n    const currentPlayerId = gameData.players[gameData.turn!];\n    const hand = gameData.hands[currentPlayerId];\n    \n    // Find ranks in hand\n    const ranks = Array.from(new Set(hand.map((card: string) => card.slice(0, -1))));\n    const targetRank = ranks[Math.floor(Math.random() * ranks.length)];\n    \n    // Choose target player\n    const otherPlayers = gameData.players.filter(p => p !== currentPlayerId);\n    const targetPlayer = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];\n    \n    return {\n      type: 'ask_for_cards',\n      data: { targetPlayer, rank: targetRank }\n    };\n  }\n\n  // Helper methods for move generation and evaluation\n  private getValidChessMoves(gameData: GameData): GameMove[] {\n    const moves: GameMove[] = [];\n    const board = gameData.board;\n    const isWhiteTurn = gameData.turn === 0;\n    const color = isWhiteTurn ? 'white' : 'black';\n    \n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (!piece) continue;\n        \n        const isWhitePiece = piece === piece.toUpperCase();\n        if (isWhitePiece !== isWhiteTurn) continue;\n        \n        // Generate all possible moves for this piece\n        const pieceMoves = this.generateChessPieceMoves(gameData, row, col, piece);\n        moves.push(...pieceMoves);\n      }\n    }\n    \n    return moves;\n  }\n\n  private generateChessPieceMoves(gameData: GameData, row: number, col: number, piece: string): GameMove[] {\n    const moves: GameMove[] = [];\n    const board = gameData.board;\n    \n    // Generate moves based on piece type\n    const directions = this.getPieceDirections(piece);\n    const isSliding = ['r', 'b', 'q'].includes(piece.toLowerCase());\n    \n    for (const [dr, dc] of directions) {\n      let distance = 1;\n      const maxDistance = isSliding ? 8 : 1;\n      \n      while (distance <= maxDistance) {\n        const newRow = row + dr * distance;\n        const newCol = col + dc * distance;\n        \n        if (newRow < 0 || newRow >= 8 || newCol < 0 || newCol >= 8) break;\n        \n        const targetPiece = board[newRow][newCol];\n        \n        // Can't move to square with own piece\n        if (targetPiece && this.isSameColor(piece, targetPiece)) break;\n        \n        // Test if this move is legal (doesn't put king in check)\n        if (this.isLegalMove(gameData, { row, col }, { row: newRow, col: newCol })) {\n          moves.push({\n            type: 'chess_move',\n            data: {\n              from: { row, col },\n              to: { row: newRow, col: newCol }\n            }\n          });\n        }\n        \n        // Stop if we hit a piece\n        if (targetPiece) break;\n        \n        distance++;\n      }\n    }\n    \n    return moves;\n  }\n  \n  private getPieceDirections(piece: string): number[][] {\n    switch (piece.toLowerCase()) {\n      case 'p': // Pawn\n        const isWhite = piece === piece.toUpperCase();\n        const direction = isWhite ? -1 : 1;\n        return [[direction, 0], [direction, -1], [direction, 1]];\n      case 'r': // Rook\n        return [[0, 1], [0, -1], [1, 0], [-1, 0]];\n      case 'n': // Knight\n        return [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n      case 'b': // Bishop\n        return [[1, 1], [1, -1], [-1, 1], [-1, -1]];\n      case 'q': // Queen\n        return [[0, 1], [0, -1], [1, 0], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n      case 'k': // King\n        return [[0, 1], [0, -1], [1, 0], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n      default:\n        return [];\n    }\n  }\n  \n  private isLegalMove(gameData: GameData, from: {row: number, col: number}, to: {row: number, col: number}): boolean {\n    // This should use the game engine's validation logic\n    // For now, basic validation\n    const board = gameData.board;\n    const piece = board[from.row][from.col];\n    const target = board[to.row][to.col];\n    \n    if (!piece) return false;\n    if (target && this.isSameColor(piece, target)) return false;\n    \n    return true;\n  }\n\n  private getValidCheckersMove(gameData: GameData): GameMove[] {\n    const moves: GameMove[] = [];\n    const board = gameData.board;\n    const isRedTurn = gameData.turn === 0;\n    \n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (!piece) continue;\n        \n        const isRedPiece = piece.toLowerCase() === 'r';\n        if (isRedPiece !== isRedTurn) continue;\n        \n        // Generate checker moves\n        const pieceMoves = this.generateCheckerMoves(board, row, col, piece);\n        moves.push(...pieceMoves);\n      }\n    }\n    \n    return moves;\n  }\n\n  private generateCheckerMoves(board: any[][], row: number, col: number, piece: string): GameMove[] {\n    const moves: GameMove[] = [];\n    const isRed = piece.toLowerCase() === 'r';\n    const direction = isRed ? -1 : 1;\n    \n    // Normal moves\n    for (const dc of [-1, 1]) {\n      const newRow = row + direction;\n      const newCol = col + dc;\n      \n      if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8 && !board[newRow][newCol]) {\n        moves.push({\n          type: 'move',\n          data: {\n            from: { row, col },\n            to: { row: newRow, col: newCol },\n            captures: []\n          }\n        });\n      }\n    }\n    \n    // Capture moves (simplified)\n    for (const dc of [-1, 1]) {\n      const jumpRow = row + direction * 2;\n      const jumpCol = col + dc * 2;\n      const middleRow = row + direction;\n      const middleCol = col + dc;\n      \n      if (jumpRow >= 0 && jumpRow < 8 && jumpCol >= 0 && jumpCol < 8 && \n          !board[jumpRow][jumpCol] && board[middleRow] && board[middleRow][middleCol] &&\n          this.isOpponentPiece(piece, board[middleRow][middleCol])) {\n        moves.push({\n          type: 'move',\n          data: {\n            from: { row, col },\n            to: { row: jumpRow, col: jumpCol },\n            captures: [{ row: middleRow, col: middleCol }]\n          }\n        });\n      }\n    }\n    \n    return moves;\n  }\n\n  private isCapture(gameData: GameData, move: GameMove): boolean {\n    const { to } = move.data;\n    return gameData.board[to.row][to.col] !== null;\n  }\n\n  private isSameColor(piece1: string, piece2: string): boolean {\n    return (piece1 === piece1.toUpperCase()) === (piece2 === piece2.toUpperCase());\n  }\n  \n  private isOpponentPiece(piece1: string, piece2: string): boolean {\n    return !this.isSameColor(piece1, piece2);\n  }\n\n  private evaluateChessMoves(gameData: GameData, moves: GameMove[]): GameMove {\n    // Simple evaluation: prefer captures, then central control\n    let bestMove = moves[0];\n    let bestScore = -Infinity;\n    \n    for (const move of moves) {\n      let score = 0;\n      \n      // Prefer captures\n      if (this.isCapture(gameData, move)) {\n        score += 10;\n      }\n      \n      // Prefer central squares\n      const { to } = move.data;\n      const centerDistance = Math.abs(to.row - 3.5) + Math.abs(to.col - 3.5);\n      score -= centerDistance;\n      \n      if (score > bestScore) {\n        bestScore = score;\n        bestMove = move;\n      }\n    }\n    \n    return bestMove;\n  }\n\n  private evaluateCheckersMoves(gameData: GameData, moves: GameMove[]): GameMove {\n    // Prefer captures, then advancing\n    let bestMove = moves[0];\n    let bestScore = -Infinity;\n    \n    for (const move of moves) {\n      let score = 0;\n      \n      // Heavily prefer captures\n      if (move.data.captures && move.data.captures.length > 0) {\n        score += 100 * move.data.captures.length;\n      }\n      \n      // Prefer advancing\n      const { from, to } = move.data;\n      const isRed = gameData.turn === 0;\n      const advancement = isRed ? from.row - to.row : to.row - from.row;\n      score += advancement * 5;\n      \n      if (score > bestScore) {\n        bestScore = score;\n        bestMove = move;\n      }\n    }\n    \n    return bestMove;\n  }\n\n  private evaluateHeartsMove(gameData: GameData, hand: string[]): GameMove {\n    // Advanced Hearts strategy would go here\n    // For now, just avoid hearts and queen of spades\n    const safeCards = hand.filter((card: string) => !card.includes('♥') && card !== 'Q♠');\n    const cardToPlay = safeCards.length > 0 \n      ? safeCards[0]\n      : hand[0];\n    \n    return {\n      type: 'play_card',\n      data: { card: cardToPlay }\n    };\n  }\n}\n\nexport const aiService = new AIService();","size_bytes":14941},"server/services/game-engine.ts":{"content":"import type { GameType, GameParticipant } from \"@shared/schema\";\n\nexport interface GameMove {\n  type: string;\n  data: any;\n}\n\nexport interface GameData {\n  gameType: GameType;\n  players: string[];\n  board?: any;\n  cards?: any;\n  scores?: Record<string, number>;\n  turn?: number;\n  phase?: string;\n  winner?: string;\n  gameOver?: boolean;\n  endReason?: string;\n  inCheck?: boolean;\n  capturedPieces?: { white: string[], black: string[] };\n  moveHistory?: any[];\n  [key: string]: any;\n}\n\nclass GameEngine {\n  initializeGame(gameType: GameType, participants: GameParticipant[]): GameData {\n    const players = participants.filter(p => !p.isSpectator).map(p => p.id);\n    \n    switch (gameType) {\n      case 'chess':\n        return this.initializeChess(players);\n      case 'checkers':\n        return this.initializeCheckers(players);\n      case 'hearts':\n        return this.initializeHearts(players);\n      case 'spades':\n        return this.initializeSpades(players);\n      case 'crazy8s':\n        return this.initializeCrazy8s(players);\n      case 'gofish':\n        return this.initializeGoFish(players);\n      default:\n        throw new Error(`Unsupported game type: ${gameType}`);\n    }\n  }\n\n  processMove(gameType: GameType, gameData: GameData, move: GameMove, playerId: string, allParticipants: any[]): GameData {\n    const updatedGameData = this.processGameSpecificMove(gameType, gameData, move, playerId);\n    \n    // Update currentTurn to next player's participant ID\n    const nonSpectatorParticipants = allParticipants.filter(p => !p.isSpectator);\n    const nextTurnParticipantId = nonSpectatorParticipants[updatedGameData.turn || 0]?.id;\n    updatedGameData.currentTurn = nextTurnParticipantId;\n    \n    return updatedGameData;\n  }\n  \n  private processGameSpecificMove(gameType: GameType, gameData: GameData, move: GameMove, playerId: string): GameData {\n    switch (gameType) {\n      case 'chess':\n        return this.processChessMove(gameData, move, playerId);\n      case 'checkers':\n        return this.processCheckersMove(gameData, move, playerId);\n      case 'hearts':\n        return this.processHeartsMove(gameData, move, playerId);\n      case 'spades':\n        return this.processSpadesMove(gameData, move, playerId);\n      case 'crazy8s':\n        return this.processCrazy8sMove(gameData, move, playerId);\n      case 'gofish':\n        return this.processGoFishMove(gameData, move, playerId);\n      default:\n        return gameData;\n    }\n  }\n\n  getNextTurn(gameType: GameType, participants: GameParticipant[], currentPlayerId: string): string | undefined {\n    const players = participants.filter(p => !p.isSpectator);\n    const currentIndex = players.findIndex(p => p.id === currentPlayerId);\n    \n    if (currentIndex === -1) return undefined;\n    \n    const nextIndex = (currentIndex + 1) % players.length;\n    return players[nextIndex].id;\n  }\n\n  private initializeChess(players: string[]): GameData {\n    const initialBoard = [\n      ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n      ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n      ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n    ];\n\n    return {\n      gameType: 'chess',\n      players,\n      board: initialBoard,\n      turn: 0, // 0 for white, 1 for black\n      phase: 'playing',\n      moveHistory: [],\n      capturedPieces: { white: [], black: [] }\n    };\n  }\n\n  private initializeCheckers(players: string[]): GameData {\n    const initialBoard = Array(8).fill(null).map(() => Array(8).fill(null));\n    \n    // Place pieces\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 8; col++) {\n        if ((row + col) % 2 === 1) {\n          initialBoard[row][col] = 'b'; // black pieces\n        }\n      }\n    }\n    \n    for (let row = 5; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if ((row + col) % 2 === 1) {\n          initialBoard[row][col] = 'r'; // red pieces\n        }\n      }\n    }\n\n    return {\n      gameType: 'checkers',\n      players,\n      board: initialBoard,\n      turn: 0,\n      phase: 'playing',\n      capturedPieces: { white: [], black: [] },\n      moveHistory: []\n    };\n  }\n\n  private initializeHearts(players: string[]): GameData {\n    const deck = this.createStandardDeck();\n    const shuffledDeck = this.shuffleDeck(deck);\n    const hands: Record<string, string[]> = {};\n    \n    // Deal 13 cards to each player\n    players.forEach((playerId, index) => {\n      hands[playerId] = shuffledDeck.slice(index * 13, (index + 1) * 13);\n    });\n\n    return {\n      gameType: 'hearts',\n      players,\n      hands,\n      scores: players.reduce((acc, p) => ({ ...acc, [p]: 0 }), {}),\n      trick: [],\n      trickWinner: null,\n      phase: 'passing', // passing, playing, scoring\n      round: 1\n    };\n  }\n\n  private initializeSpades(players: string[]): GameData {\n    const deck = this.createStandardDeck();\n    const shuffledDeck = this.shuffleDeck(deck);\n    const hands: Record<string, string[]> = {};\n    \n    players.forEach((playerId, index) => {\n      hands[playerId] = shuffledDeck.slice(index * 13, (index + 1) * 13);\n    });\n\n    return {\n      gameType: 'spades',\n      players,\n      hands,\n      scores: players.reduce((acc, p) => ({ ...acc, [p]: 0 }), {}),\n      bids: {},\n      tricks: players.reduce((acc, p) => ({ ...acc, [p]: 0 }), {}),\n      phase: 'bidding',\n      round: 1\n    };\n  }\n\n  private initializeCrazy8s(players: string[]): GameData {\n    const deck = this.createStandardDeck();\n    const shuffledDeck = this.shuffleDeck(deck);\n    const hands: Record<string, string[]> = {};\n    \n    // Deal cards based on player count\n    const cardsPerPlayer = players.length <= 2 ? 7 : 5;\n    let deckIndex = 0;\n    \n    players.forEach(playerId => {\n      hands[playerId] = shuffledDeck.slice(deckIndex, deckIndex + cardsPerPlayer);\n      deckIndex += cardsPerPlayer;\n    });\n\n    const drawPile = shuffledDeck.slice(deckIndex + 1);\n    const discardPile = [shuffledDeck[deckIndex]];\n\n    return {\n      gameType: 'crazy8s',\n      players,\n      hands,\n      drawPile,\n      discardPile,\n      currentSuit: null,\n      phase: 'playing',\n      direction: 1\n    };\n  }\n\n  private initializeGoFish(players: string[]): GameData {\n    const deck = this.createStandardDeck();\n    const shuffledDeck = this.shuffleDeck(deck);\n    const hands: Record<string, string[]> = {};\n    \n    // Deal cards\n    const cardsPerPlayer = players.length <= 4 ? 7 : 5;\n    let deckIndex = 0;\n    \n    players.forEach(playerId => {\n      hands[playerId] = shuffledDeck.slice(deckIndex, deckIndex + cardsPerPlayer);\n      deckIndex += cardsPerPlayer;\n    });\n\n    return {\n      gameType: 'gofish',\n      players,\n      hands,\n      drawPile: shuffledDeck.slice(deckIndex),\n      books: players.reduce((acc, p) => ({ ...acc, [p]: [] }), {}),\n      phase: 'playing'\n    };\n  }\n\n  private processChessMove(gameData: GameData, move: GameMove, playerId: string): GameData {\n    const { from, to } = move.data;\n    \n    // Validate the move\n    if (!this.isValidChessMove(gameData, from, to)) {\n      throw new Error('Invalid chess move');\n    }\n    \n    const newBoard = JSON.parse(JSON.stringify(gameData.board));\n    const piece = newBoard[from.row][from.col];\n    const capturedPiece = newBoard[to.row][to.col];\n    \n    // Make the move\n    newBoard[to.row][to.col] = piece;\n    newBoard[from.row][from.col] = null;\n    \n    // Update captured pieces\n    const newCapturedPieces = { \n      white: gameData.capturedPieces?.white || [],\n      black: gameData.capturedPieces?.black || []\n    };\n    if (capturedPiece) {\n      const capturingColor = piece === piece.toUpperCase() ? 'white' : 'black';\n      newCapturedPieces[capturingColor].push(capturedPiece);\n    }\n    \n    // Check for pawn promotion\n    if (piece.toLowerCase() === 'p') {\n      if ((piece === 'P' && to.row === 0) || (piece === 'p' && to.row === 7)) {\n        newBoard[to.row][to.col] = piece === 'P' ? 'Q' : 'q'; // Auto-promote to queen\n      }\n    }\n    \n    const newGameData = {\n      ...gameData,\n      board: newBoard,\n      turn: 1 - gameData.turn!,\n      moveHistory: [...(gameData.moveHistory || []), move],\n      capturedPieces: newCapturedPieces\n    };\n    \n    // Check for checkmate or check\n    const currentColor = newGameData.turn === 0 ? 'white' : 'black';\n    const isInCheck = this.isKingInCheck(newGameData.board!, currentColor);\n    const hasValidMoves = this.hasValidMoves(newGameData, currentColor);\n    \n    if (isInCheck && !hasValidMoves) {\n      newGameData.winner = newGameData.turn === 0 ? 'black' : 'white';\n      newGameData.gameOver = true;\n      newGameData.endReason = 'checkmate';\n    } else if (!hasValidMoves) {\n      newGameData.winner = 'draw';\n      newGameData.gameOver = true;\n      newGameData.endReason = 'stalemate';\n    } else if (isInCheck) {\n      newGameData.inCheck = true;\n    }\n    \n    return newGameData;\n  }\n  \n  private isValidChessMove(gameData: GameData, from: {row: number, col: number}, to: {row: number, col: number}): boolean {\n    const board = gameData.board;\n    const piece = board[from.row][from.col];\n    const targetPiece = board[to.row][to.col];\n    \n    if (!piece) return false;\n    \n    // Can't capture own pieces\n    if (targetPiece && this.isSameColor(piece, targetPiece)) return false;\n    \n    // Check if move is valid for this piece type\n    if (!this.isValidPieceMove(board, piece, from, to)) return false;\n    \n    // Check if move would put own king in check\n    const testBoard = JSON.parse(JSON.stringify(board));\n    testBoard[to.row][to.col] = piece;\n    testBoard[from.row][from.col] = null;\n    \n    const color = piece === piece.toUpperCase() ? 'white' : 'black';\n    return !this.isKingInCheck(testBoard, color);\n  }\n  \n  private isValidPieceMove(board: any[][], piece: string, from: {row: number, col: number}, to: {row: number, col: number}): boolean {\n    const dr = to.row - from.row;\n    const dc = to.col - from.col;\n    const absDr = Math.abs(dr);\n    const absDc = Math.abs(dc);\n    \n    switch (piece.toLowerCase()) {\n      case 'p': // Pawn\n        return this.isValidPawnMove(board, piece, from, to, dr, dc);\n      case 'r': // Rook\n        return (dr === 0 || dc === 0) && this.isPathClear(board, from, to);\n      case 'n': // Knight\n        return (absDr === 2 && absDc === 1) || (absDr === 1 && absDc === 2);\n      case 'b': // Bishop\n        return absDr === absDc && this.isPathClear(board, from, to);\n      case 'q': // Queen\n        return (dr === 0 || dc === 0 || absDr === absDc) && this.isPathClear(board, from, to);\n      case 'k': // King\n        return absDr <= 1 && absDc <= 1;\n      default:\n        return false;\n    }\n  }\n  \n  private isValidPawnMove(board: any[][], piece: string, from: {row: number, col: number}, to: {row: number, col: number}, dr: number, dc: number): boolean {\n    const isWhite = piece === piece.toUpperCase();\n    const direction = isWhite ? -1 : 1;\n    const startRow = isWhite ? 6 : 1;\n    const targetPiece = board[to.row][to.col];\n    \n    // Forward move\n    if (dc === 0) {\n      if (dr === direction && !targetPiece) return true;\n      if (from.row === startRow && dr === 2 * direction && !targetPiece && !board[from.row + direction][from.col]) return true;\n    }\n    // Diagonal capture\n    else if (Math.abs(dc) === 1 && dr === direction && targetPiece && !this.isSameColor(piece, targetPiece)) {\n      return true;\n    }\n    \n    return false;\n  }\n  \n  private isPathClear(board: any[][], from: {row: number, col: number}, to: {row: number, col: number}): boolean {\n    const dr = Math.sign(to.row - from.row);\n    const dc = Math.sign(to.col - from.col);\n    \n    let r = from.row + dr;\n    let c = from.col + dc;\n    \n    while (r !== to.row || c !== to.col) {\n      if (board[r][c] !== null) return false;\n      r += dr;\n      c += dc;\n    }\n    \n    return true;\n  }\n  \n  private isSameColor(piece1: string, piece2: string): boolean {\n    return (piece1 === piece1.toUpperCase()) === (piece2 === piece2.toUpperCase());\n  }\n  \n  private isKingInCheck(board: any[][], color: string): boolean {\n    // Find the king\n    const king = color === 'white' ? 'K' : 'k';\n    let kingPos = null;\n    \n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (board[r][c] === king) {\n          kingPos = { row: r, col: c };\n          break;\n        }\n      }\n      if (kingPos) break;\n    }\n    \n    if (!kingPos) return false;\n    \n    // Check if any enemy piece can attack the king\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = board[r][c];\n        if (piece && !this.isSameColor(piece, king)) {\n          if (this.canPieceAttack(board, piece, { row: r, col: c }, kingPos)) {\n            return true;\n          }\n        }\n      }\n    }\n    \n    return false;\n  }\n  \n  private canPieceAttack(board: any[][], piece: string, from: {row: number, col: number}, to: {row: number, col: number}): boolean {\n    const dr = to.row - from.row;\n    const dc = to.col - from.col;\n    const absDr = Math.abs(dr);\n    const absDc = Math.abs(dc);\n    \n    switch (piece.toLowerCase()) {\n      case 'p': // Pawn\n        const isWhite = piece === piece.toUpperCase();\n        const direction = isWhite ? -1 : 1;\n        return dr === direction && absDc === 1;\n      case 'r': // Rook\n        return (dr === 0 || dc === 0) && this.isPathClear(board, from, to);\n      case 'n': // Knight\n        return (absDr === 2 && absDc === 1) || (absDr === 1 && absDc === 2);\n      case 'b': // Bishop\n        return absDr === absDc && this.isPathClear(board, from, to);\n      case 'q': // Queen\n        return (dr === 0 || dc === 0 || absDr === absDc) && this.isPathClear(board, from, to);\n      case 'k': // King\n        return absDr <= 1 && absDc <= 1;\n      default:\n        return false;\n    }\n  }\n  \n  private hasValidMoves(gameData: GameData, color: string): boolean {\n    const board = gameData.board;\n    if (!board) return false;\n    \n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = board[r][c];\n        if (piece && ((color === 'white' && piece === piece.toUpperCase()) || (color === 'black' && piece === piece.toLowerCase()))) {\n          // Try all possible moves for this piece\n          for (let tr = 0; tr < 8; tr++) {\n            for (let tc = 0; tc < 8; tc++) {\n              if (r === tr && c === tc) continue;\n              if (this.isValidChessMove(gameData, { row: r, col: c }, { row: tr, col: tc })) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    return false;\n  }\n\n  private processCheckersMove(gameData: GameData, move: GameMove, playerId: string): GameData {\n    const { from, to, captures } = move.data;\n    \n    // Validate the move\n    if (!this.isValidCheckersMove(gameData, from, to, captures)) {\n      throw new Error('Invalid checkers move');\n    }\n    \n    const newBoard = JSON.parse(JSON.stringify(gameData.board));\n    const piece = newBoard[from.row][from.col];\n    \n    // Move the piece\n    newBoard[to.row][to.col] = piece;\n    newBoard[from.row][from.col] = null;\n    \n    // Handle captures\n    if (captures && captures.length > 0) {\n      captures.forEach((capture: {row: number, col: number}) => {\n        newBoard[capture.row][capture.col] = null;\n      });\n    }\n    \n    // Check for king promotion (reaching opposite end)\n    const isRedPiece = piece?.toLowerCase() === 'r';\n    const promotionRow = isRedPiece ? 0 : 7;\n    if (to.row === promotionRow && piece && !piece.includes('K')) {\n      newBoard[to.row][to.col] = piece + 'K'; // Make it a king\n    }\n    \n    const newGameData = {\n      ...gameData,\n      board: newBoard,\n      turn: 1 - gameData.turn!,\n      moveHistory: [...(gameData.moveHistory || []), move]\n    };\n    \n    // Check for win condition\n    const opponentColor = gameData.turn === 0 ? 'b' : 'r';\n    if (this.hasNoCheckersMovesLeft(newGameData, opponentColor)) {\n      newGameData.gameOver = true;\n      newGameData.winner = gameData.turn === 0 ? 'red' : 'black';\n      newGameData.endReason = 'no moves left';\n    }\n    \n    return newGameData;\n  }\n  \n  private isValidCheckersMove(gameData: GameData, from: {row: number, col: number}, to: {row: number, col: number}, captures?: {row: number, col: number}[]): boolean {\n    const board = gameData.board;\n    const piece = board[from.row][from.col];\n    \n    if (!piece) return false;\n    \n    // Check if it's the right player's turn\n    const isRedPiece = piece.toLowerCase().includes('r');\n    const isRedTurn = gameData.turn === 0;\n    if (isRedPiece !== isRedTurn) return false;\n    \n    // Check if destination is empty\n    if (board[to.row][to.col] !== null) return false;\n    \n    const dr = to.row - from.row;\n    const dc = to.col - from.col;\n    const absDr = Math.abs(dr);\n    const absDc = Math.abs(dc);\n    \n    // Must move diagonally\n    if (absDr !== absDc) return false;\n    \n    const isKing = piece.includes('K');\n    \n    // Regular pieces can only move forward, kings can move any direction\n    if (!isKing) {\n      const correctDirection = isRedPiece ? dr < 0 : dr > 0;\n      if (!correctDirection) return false;\n    }\n    \n    // Check if this is a capture move\n    if (absDr === 2) {\n      // This is a jump/capture move\n      const middleRow = from.row + dr / 2;\n      const middleCol = from.col + dc / 2;\n      const middlePiece = board[middleRow][middleCol];\n      \n      // Must have an opponent piece to jump over\n      if (!middlePiece) return false;\n      \n      const isMiddlePieceRed = middlePiece.toLowerCase().includes('r');\n      if (isMiddlePieceRed === isRedPiece) return false; // Can't jump own pieces\n      \n      return true;\n    } else if (absDr === 1) {\n      // Regular move - only allowed if no captures are available\n      return !this.hasAvailableCaptures(board, isRedPiece);\n    }\n    \n    return false;\n  }\n  \n  private hasAvailableCaptures(board: any[][], isRedPlayer: boolean): boolean {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (!piece) continue;\n        \n        const isRedPiece = piece.toLowerCase().includes('r');\n        if (isRedPiece !== isRedPlayer) continue;\n        \n        // Check for possible captures from this piece\n        const directions = piece.includes('K') ? [[-2, -2], [-2, 2], [2, -2], [2, 2]] : \n                          isRedPiece ? [[-2, -2], [-2, 2]] : [[2, -2], [2, 2]];\n        \n        for (const [dr, dc] of directions) {\n          const newRow = row + dr;\n          const newCol = col + dc;\n          const middleRow = row + dr / 2;\n          const middleCol = col + dc / 2;\n          \n          if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8 &&\n              board[newRow][newCol] === null && board[middleRow][middleCol]) {\n            const middlePiece = board[middleRow][middleCol];\n            const isMiddleRed = middlePiece.toLowerCase().includes('r');\n            if (isMiddleRed !== isRedPiece) {\n              return true; // Found a capture\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n  \n  private hasNoCheckersMovesLeft(gameData: GameData, playerColor: string): boolean {\n    const board = gameData.board;\n    const isRedPlayer = playerColor === 'r';\n    \n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (!piece) continue;\n        \n        const isRedPiece = piece.toLowerCase().includes('r');\n        if (isRedPiece !== isRedPlayer) continue;\n        \n        // Check if this piece has any valid moves\n        const isKing = piece.includes('K');\n        const directions = isKing ? [[-1, -1], [-1, 1], [1, -1], [1, 1], [-2, -2], [-2, 2], [2, -2], [2, 2]] :\n                          isRedPiece ? [[-1, -1], [-1, 1], [-2, -2], [-2, 2]] : [[1, -1], [1, 1], [2, -2], [2, 2]];\n        \n        for (const [dr, dc] of directions) {\n          const newRow = row + dr;\n          const newCol = col + dc;\n          \n          if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n            const captures = Math.abs(dr) === 2 ? [{row: row + dr/2, col: col + dc/2}] : [];\n            if (this.isValidCheckersMove(gameData, {row, col}, {row: newRow, col: newCol}, captures)) {\n              return false; // Found a valid move\n            }\n          }\n        }\n      }\n    }\n    \n    return true; // No valid moves found\n  }\n\n  private processHeartsMove(gameData: GameData, move: GameMove, playerId: string): GameData {\n    // Hearts card play logic\n    const newHands = { ...gameData.hands };\n    const { card } = move.data;\n    \n    // Remove card from player's hand\n    newHands[playerId] = newHands[playerId].filter((c: string) => c !== card);\n    \n    const newTrick = [...(gameData.trick || []), { playerId, card }];\n    \n    return {\n      ...gameData,\n      hands: newHands,\n      trick: newTrick\n    };\n  }\n\n  private processSpadesMove(gameData: GameData, move: GameMove, playerId: string): GameData {\n    if (gameData.phase === 'bidding') {\n      return {\n        ...gameData,\n        bids: { ...gameData.bids, [playerId]: move.data.bid }\n      };\n    }\n    \n    // Card play logic\n    const newHands = { ...gameData.hands };\n    const { card } = move.data;\n    \n    newHands[playerId] = newHands[playerId].filter((c: string) => c !== card);\n    \n    return {\n      ...gameData,\n      hands: newHands\n    };\n  }\n\n  private processCrazy8sMove(gameData: GameData, move: GameMove, playerId: string): GameData {\n    const newHands = { ...gameData.hands };\n    const { card, newSuit } = move.data;\n    \n    if (move.type === 'play_card') {\n      newHands[playerId] = newHands[playerId].filter((c: string) => c !== card);\n      \n      return {\n        ...gameData,\n        hands: newHands,\n        discardPile: [...gameData.discardPile, card],\n        currentSuit: newSuit || null\n      };\n    }\n    \n    if (move.type === 'draw_card') {\n      const newDrawPile = [...gameData.drawPile];\n      const drawnCard = newDrawPile.pop();\n      \n      if (drawnCard) {\n        newHands[playerId] = [...newHands[playerId], drawnCard];\n      }\n      \n      return {\n        ...gameData,\n        hands: newHands,\n        drawPile: newDrawPile\n      };\n    }\n    \n    return gameData;\n  }\n\n  private processGoFishMove(gameData: GameData, move: GameMove, playerId: string): GameData {\n    const { targetPlayer, rank } = move.data;\n    const newHands = { ...gameData.hands };\n    const targetCards = newHands[targetPlayer].filter((card: string) => card.startsWith(rank));\n    \n    if (targetCards.length > 0) {\n      // Transfer cards\n      newHands[targetPlayer] = newHands[targetPlayer].filter((card: string) => !card.startsWith(rank));\n      newHands[playerId] = [...newHands[playerId], ...targetCards];\n    } else {\n      // Go fish - draw a card\n      const newDrawPile = [...gameData.drawPile];\n      const drawnCard = newDrawPile.pop();\n      \n      if (drawnCard) {\n        newHands[playerId] = [...newHands[playerId], drawnCard];\n      }\n    }\n    \n    return {\n      ...gameData,\n      hands: newHands,\n      drawPile: gameData.drawPile.slice(0, -1)\n    };\n  }\n\n  private createStandardDeck(): string[] {\n    const suits = ['♠', '♥', '♦', '♣'];\n    const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n    const deck: string[] = [];\n    \n    suits.forEach(suit => {\n      ranks.forEach(rank => {\n        deck.push(`${rank}${suit}`);\n      });\n    });\n    \n    return deck;\n  }\n\n  private shuffleDeck(deck: string[]): string[] {\n    const shuffled = [...deck];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n  }\n}\n\nexport const gameEngine = new GameEngine();\n","size_bytes":24129},"client/src/components/chat.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Send } from 'lucide-react';\n\ninterface ChatMessage {\n  id: string;\n  userId: string;\n  message: string;\n  timestamp: Date;\n}\n\ninterface ChatProps {\n  roomId: string;\n  onSendMessage: (message: string) => void;\n  messages?: ChatMessage[];\n}\n\nexport function Chat({ roomId, onSendMessage, messages: externalMessages }: ChatProps) {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      id: '1',\n      userId: 'System',\n      message: 'Welcome to the game room!',\n      timestamp: new Date()\n    }\n  ]);\n  \n  // Update messages when external messages change\n  useEffect(() => {\n    if (externalMessages) {\n      setMessages(prev => [...prev, ...externalMessages]);\n    }\n  }, [externalMessages]);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim()) return;\n\n    const newMessage: ChatMessage = {\n      id: Date.now().toString(),\n      userId: 'You',\n      message: message.trim(),\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, newMessage]);\n    onSendMessage(message.trim());\n    setMessage('');\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  return (\n    <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50 h-80 flex flex-col\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-white text-lg\">Chat</CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 flex flex-col p-4 pt-0\">\n        {/* Messages */}\n        <div className=\"flex-1 overflow-y-auto space-y-2 mb-3\" data-testid=\"chat-messages\">\n          {messages.map((msg) => (\n            <div key={msg.id} className=\"text-sm\" data-testid={`chat-message-${msg.id}`}>\n              <div className=\"flex items-baseline space-x-2\">\n                <span className={`font-medium ${msg.userId === 'System' ? 'text-blue-400' : msg.userId === 'You' ? 'text-green-400' : 'text-purple-400'}`}>\n                  {msg.userId}:\n                </span>\n                <span className=\"text-white\">{msg.message}</span>\n                <span className=\"text-gray-500 text-xs ml-auto\">\n                  {formatTime(msg.timestamp)}\n                </span>\n              </div>\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Input */}\n        <form onSubmit={handleSubmit} className=\"flex space-x-2\">\n          <Input\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            placeholder=\"Type a message...\"\n            className=\"flex-1 bg-game-slate border-gray-600 text-white\"\n            data-testid=\"input-chat-message\"\n          />\n          <Button \n            type=\"submit\" \n            size=\"icon\"\n            className=\"bg-game-blue hover:bg-game-blue/80\"\n            data-testid=\"button-send-message\"\n          >\n            <Send size={16} />\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3482},"client/src/components/create-room-modal.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { getGameInfo } from '@/lib/game-types';\n\ninterface CreateRoomModalProps {\n  onRoomCreated: (roomId: string) => void;\n  onClose: () => void;\n}\n\nexport function CreateRoomModal({ onRoomCreated, onClose }: CreateRoomModalProps) {\n  const [roomName, setRoomName] = useState('');\n  const [gameType, setGameType] = useState('');\n  const [maxPlayers, setMaxPlayers] = useState('2');\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [enableChat, setEnableChat] = useState(true);\n  const [allowSpectators, setAllowSpectators] = useState(true);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createRoomMutation = useMutation({\n    mutationFn: async (roomData: any) => {\n      const userId = localStorage.getItem('userId');\n      const response = await apiRequest('POST', '/api/rooms', { ...roomData, hostId: userId });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      console.log('Room creation response:', data); // Debug log\n      toast({\n        title: 'Room Created',\n        description: 'Your game room has been created successfully!'\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/rooms'] });\n      onRoomCreated(data.id);\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to create room. Please try again.',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const handleSubmit = () => {\n    if (!roomName.trim() || !gameType) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please fill in all required fields.',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    const gameInfo = getGameInfo(gameType);\n    const finalMaxPlayers = gameInfo ? gameInfo.maxPlayers : parseInt(maxPlayers);\n    \n    createRoomMutation.mutate({\n      name: roomName.trim(),\n      gameType,\n      maxPlayers: finalMaxPlayers,\n      isPrivate,\n      enableChat,\n      allowSpectators,\n      gameMode: 'multiplayer'\n    });\n  };\n\n  const gameTypes = [\n    { value: 'chess', label: 'Chess' },\n    { value: 'hearts', label: 'Hearts' },\n    { value: 'checkers', label: 'Checkers' },\n    { value: 'crazy8s', label: 'Crazy 8s' },\n    { value: 'spades', label: 'Spades' },\n    { value: 'gofish', label: 'Go Fish' }\n  ];\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md bg-card border-border shadow-lg\">\n        <DialogHeader>\n          <DialogTitle className=\"text-foreground\">Create Game Room</DialogTitle>\n          <DialogDescription className=\"text-muted-foreground\">\n            Configure your game room settings and invite players to join.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"roomName\" className=\"text-foreground\">Room Name</Label>\n            <Input\n              id=\"roomName\"\n              placeholder=\"Enter room name\"\n              value={roomName}\n              onChange={(e) => setRoomName(e.target.value)}\n              className=\"bg-input border-border text-foreground placeholder:text-muted-foreground\"\n              data-testid=\"input-room-name\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"gameType\" className=\"text-foreground\">Game Type</Label>\n            <Select value={gameType} onValueChange={(value) => {\n              setGameType(value);\n              const gameInfo = getGameInfo(value);\n              if (gameInfo) {\n                setMaxPlayers(gameInfo.maxPlayers.toString());\n              }\n            }}>\n              <SelectTrigger className=\"bg-input border-border text-foreground\" data-testid=\"select-game-type\">\n                <SelectValue placeholder=\"Select a game\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-popover border-border\">\n                {gameTypes.map((game) => (\n                  <SelectItem key={game.value} value={game.value} className=\"text-foreground hover:bg-accent hover:text-accent-foreground\">\n                    {game.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"maxPlayers\" className=\"text-foreground\">Max Players</Label>\n            <div className=\"bg-input border border-border rounded-md px-3 py-2 text-foreground\">\n              {gameType ? (\n                <span>{getGameInfo(gameType)?.maxPlayers || maxPlayers} Players (auto-set by game type)</span>\n              ) : (\n                <span className=\"text-muted-foreground\">Select a game type first</span>\n              )}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Player count is automatically set based on the selected game type\n            </p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"private\" className=\"text-foreground\">Private Room</Label>\n              <Switch\n                id=\"private\"\n                checked={isPrivate}\n                onCheckedChange={setIsPrivate}\n                data-testid=\"switch-private\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"chat\" className=\"text-foreground\">Enable Chat</Label>\n              <Switch\n                id=\"chat\"\n                checked={enableChat}\n                onCheckedChange={setEnableChat}\n                data-testid=\"switch-chat\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"spectators\" className=\"text-foreground\">Allow Spectators</Label>\n              <Switch\n                id=\"spectators\"\n                checked={allowSpectators}\n                onCheckedChange={setAllowSpectators}\n                data-testid=\"switch-spectators\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex space-x-2 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex-1\"\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSubmit}\n              disabled={createRoomMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-create-room\"\n            >\n              {createRoomMutation.isPending ? 'Creating...' : 'Create Room'}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7281},"client/src/components/game-card.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Clock, Users, Eye, Lock } from 'lucide-react';\nimport type { GameRoom } from '@shared/schema';\n\ninterface GameCardProps {\n  room: GameRoom;\n  onJoin: (roomId: string) => void;\n}\n\nexport function GameCard({ room, onJoin }: GameCardProps) {\n  const getGameDisplayName = (gameType: string) => {\n    const gameNames: Record<string, string> = {\n      chess: 'Chess',\n      checkers: 'Checkers',\n      hearts: 'Hearts',\n      spades: 'Spades',\n      crazy8s: 'Crazy 8s',\n      gofish: 'Go Fish'\n    };\n    return gameNames[gameType] || gameType;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'waiting':\n        return 'bg-green-500';\n      case 'playing':\n        return 'bg-yellow-500';\n      case 'finished':\n        return 'bg-gray-500';\n      default:\n        return 'bg-gray-400';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'waiting':\n        return 'Waiting for players';\n      case 'playing':\n        return 'Game in progress';\n      case 'finished':\n        return 'Finished';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\" data-testid={`card-room-${room.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg\">{room.name}</CardTitle>\n          <div className=\"flex items-center space-x-1\">\n            {room.isPrivate && <Lock className=\"h-4 w-4 text-muted-foreground\" />}\n            {room.allowSpectators && <Eye className=\"h-4 w-4 text-muted-foreground\" />}\n          </div>\n        </div>\n        <CardDescription className=\"flex items-center space-x-2\">\n          <Badge variant=\"secondary\">{getGameDisplayName(room.gameType)}</Badge>\n          <span className={`w-2 h-2 rounded-full ${getStatusColor(room.status)}`}></span>\n          <span className=\"text-sm\">{getStatusText(room.status)}</span>\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <div className=\"flex items-center space-x-1\">\n            <Users className=\"h-4 w-4\" />\n            <span>Players: {room.currentPlayers || 0}/{room.maxPlayers}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Clock className=\"h-4 w-4\" />\n            <span>{new Date(room.createdAt!).toLocaleDateString()}</span>\n          </div>\n        </div>\n        \n        <Button \n          className=\"w-full\" \n          onClick={() => onJoin(room.id)}\n          disabled={room.status === 'playing' && !room.allowSpectators}\n          data-testid={`button-join-${room.id}`}\n        >\n          {room.status === 'waiting' ? 'Join Game' : 'Watch Game'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3102},"client/src/components/player-card.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Crown, Check, Clock } from 'lucide-react';\n\ninterface PlayerCardProps {\n  participant: {\n    id: string;\n    userId: string;\n    isReady: boolean;\n    isSpectator: boolean;\n  };\n  isHost: boolean;\n  isCurrentUser: boolean;\n}\n\nexport function PlayerCard({ participant, isHost, isCurrentUser }: PlayerCardProps) {\n  const getUserInitials = (userId: string) => {\n    return userId.split('_').map(part => part[0]).join('').toUpperCase();\n  };\n\n  return (\n    <Card className={`bg-game-navy/50 backdrop-blur-sm border-gray-700/50 ${isCurrentUser ? 'ring-2 ring-game-blue' : ''}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center space-x-3\" data-testid={`player-card-${participant.userId}`}>\n          <div className=\"player-avatar bg-gradient-to-br from-blue-500 to-purple-500\">\n            <span>{getUserInitials(participant.userId)}</span>\n          </div>\n          \n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-2\">\n              <p className=\"text-white font-medium\">\n                {isCurrentUser ? 'You' : participant.userId}\n              </p>\n              {isHost && (\n                <Crown className=\"text-yellow-500\" size={16} data-testid=\"host-crown\" />\n              )}\n            </div>\n            \n            <div className=\"flex items-center space-x-2 mt-1\">\n              {participant.isReady ? (\n                <div className=\"flex items-center space-x-1\">\n                  <Check className=\"text-green-400\" size={14} />\n                  <span className=\"text-green-400 text-sm\">Ready</span>\n                </div>\n              ) : (\n                <div className=\"flex items-center space-x-1\">\n                  <Clock className=\"text-yellow-400\" size={14} />\n                  <span className=\"text-yellow-400 text-sm\">Not Ready</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className={`w-3 h-3 rounded-full ${participant.isReady ? 'bg-green-500' : 'bg-gray-500'}`} />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2142},"client/src/hooks/use-game-state.ts":{"content":"import { useState, useEffect } from \"react\";\nimport type { GameState } from \"@shared/schema\";\n\nexport interface GameMove {\n  type: string;\n  data: any;\n}\n\nexport function useGameState(socket: WebSocket | null, initialGameState?: GameState | null) {\n  const [gameState, setGameState] = useState<any>(initialGameState?.gameData || null);\n  const [currentTurn, setCurrentTurn] = useState<string | undefined>(initialGameState?.currentTurn || undefined);\n  const [turnNumber, setTurnNumber] = useState<number>(initialGameState?.turnNumber || 1);\n  const [isMyTurn, setIsMyTurn] = useState(false);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    const handleMessage = (event: MessageEvent) => {\n      try {\n        const message = JSON.parse(event.data);\n        \n        switch (message.type) {\n          case 'game_started':\n            setGameState(message.gameData);\n            setCurrentTurn(message.currentTurn);\n            setTurnNumber(1);\n            break;\n            \n          case 'game_updated':\n            setGameState(message.gameData);\n            setCurrentTurn(message.currentTurn);\n            setTurnNumber(prev => prev + 1);\n            break;\n            \n          case 'game_ended':\n            setGameState(message.gameData);\n            setCurrentTurn(undefined);\n            break;\n            \n          case 'turn_timeout':\n            // Handle turn timeout\n            console.log(\"Turn timeout for player:\", message.playerId);\n            break;\n            \n          case 'invalid_move':\n            console.error(\"Invalid move:\", message.reason);\n            break;\n        }\n      } catch (error) {\n        console.error(\"Failed to parse game message:\", error);\n      }\n    };\n\n    socket.addEventListener('message', handleMessage);\n    \n    return () => {\n      socket.removeEventListener('message', handleMessage);\n    };\n  }, [socket]);\n\n  // Update isMyTurn based on current turn and user\n  useEffect(() => {\n    const currentUser = localStorage.getItem(\"currentUser\");\n    if (currentUser && currentTurn) {\n      const user = JSON.parse(currentUser);\n      // This would need to be matched with participant ID, not user ID\n      // For now, this is a simplified check\n      setIsMyTurn(currentTurn === user.id);\n    }\n  }, [currentTurn]);\n\n  const makeMove = (move: GameMove) => {\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n      console.warn(\"Cannot make move: WebSocket not connected\");\n      return false;\n    }\n\n    if (!isMyTurn) {\n      console.warn(\"Cannot make move: Not your turn\");\n      return false;\n    }\n\n    socket.send(JSON.stringify({\n      type: 'game_move',\n      move\n    }));\n    \n    return true;\n  };\n\n  const forfeitGame = () => {\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n      console.warn(\"Cannot forfeit: WebSocket not connected\");\n      return false;\n    }\n\n    socket.send(JSON.stringify({\n      type: 'forfeit_game'\n    }));\n    \n    return true;\n  };\n\n  const requestDraw = () => {\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n      console.warn(\"Cannot request draw: WebSocket not connected\");\n      return false;\n    }\n\n    socket.send(JSON.stringify({\n      type: 'request_draw'\n    }));\n    \n    return true;\n  };\n\n  return {\n    gameState,\n    currentTurn,\n    turnNumber,\n    isMyTurn,\n    makeMove,\n    forfeitGame,\n    requestDraw,\n  };\n}\n","size_bytes":3369},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useState, useEffect, useRef } from \"react\";\n\nexport function useWebSocket(userId?: string, roomId?: string) {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<any>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n  const reconnectAttemptsRef = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  useEffect(() => {\n    if (!userId) return;\n\n    const connect = () => {\n      try {\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n        const wsUrl = `${protocol}//${window.location.host}/ws`;\n        const ws = new WebSocket(wsUrl);\n\n        ws.onopen = () => {\n          console.log(\"WebSocket connected\");\n          setIsConnected(true);\n          setSocket(ws);\n          reconnectAttemptsRef.current = 0;\n\n          // Join room if roomId is provided\n          if (roomId) {\n            ws.send(JSON.stringify({\n              type: 'join_room',\n              userId,\n              roomId\n            }));\n          }\n        };\n\n        ws.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data);\n            setLastMessage(message);\n          } catch (error) {\n            console.error(\"Failed to parse WebSocket message:\", error);\n          }\n        };\n\n        ws.onclose = (event) => {\n          console.log(\"WebSocket disconnected:\", event.code, event.reason);\n          setIsConnected(false);\n          setSocket(null);\n\n          // Attempt to reconnect unless it was a manual close\n          if (event.code !== 1000 && reconnectAttemptsRef.current < maxReconnectAttempts) {\n            const delay = Math.pow(2, reconnectAttemptsRef.current) * 1000; // Exponential backoff\n            reconnectTimeoutRef.current = setTimeout(() => {\n              reconnectAttemptsRef.current++;\n              console.log(`Reconnection attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts}`);\n              connect();\n            }, delay);\n          }\n        };\n\n        ws.onerror = (error) => {\n          console.error(\"WebSocket error:\", error);\n        };\n\n        return ws;\n      } catch (error) {\n        console.error(\"Failed to create WebSocket connection:\", error);\n        return null;\n      }\n    };\n\n    const ws = connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        // Send leave room message if in a room\n        if (roomId) {\n          ws.send(JSON.stringify({\n            type: 'leave_room',\n            userId,\n            roomId\n          }));\n        }\n        ws.close(1000, \"Component unmounting\");\n      }\n    };\n  }, [userId, roomId]);\n\n  const sendMessage = (message: any) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.warn(\"WebSocket is not connected\");\n      return false;\n    }\n  };\n\n  return {\n    socket,\n    isConnected,\n    lastMessage,\n    sendMessage,\n    reconnectAttempts: reconnectAttemptsRef.current,\n  };\n}\n","size_bytes":3212},"client/src/lib/game-types.ts":{"content":"export interface GameInfo {\n  id: string;\n  name: string;\n  minPlayers: number;\n  maxPlayers: number;\n  description: string;\n  category: 'board' | 'card';\n  difficulty: 'easy' | 'medium' | 'hard';\n  estimatedTime: string;\n  rules: string[];\n}\n\nexport const GAME_DEFINITIONS: Record<string, GameInfo> = {\n  chess: {\n    id: 'chess',\n    name: 'Chess',\n    minPlayers: 2,\n    maxPlayers: 2,\n    description: 'The classic strategy board game',\n    category: 'board',\n    difficulty: 'hard',\n    estimatedTime: '30-60 min',\n    rules: [\n      'Players alternate turns moving pieces',\n      'Goal is to checkmate the opponent\\'s king',\n      'Each piece has unique movement patterns',\n      'Special moves: castling, en passant'\n    ]\n  },\n  \n  checkers: {\n    id: 'checkers',\n    name: 'Checkers',\n    minPlayers: 2,\n    maxPlayers: 2,\n    description: 'Strategic board game with jumping captures',\n    category: 'board',\n    difficulty: 'medium',\n    estimatedTime: '15-30 min',\n    rules: [\n      'Move pieces diagonally on dark squares',\n      'Capture by jumping over opponent pieces',\n      'Reach the end to become a king',\n      'Eliminate all opponent pieces to win'\n    ]\n  },\n  \n  hearts: {\n    id: 'hearts',\n    name: 'Hearts',\n    minPlayers: 4,\n    maxPlayers: 4,\n    description: 'Trick-taking card game where you avoid penalty cards',\n    category: 'card',\n    difficulty: 'medium',\n    estimatedTime: '20-40 min',\n    rules: [\n      'Avoid taking hearts (1 point each)',\n      'Avoid the Queen of Spades (13 points)',\n      'Lowest score wins after someone reaches 100',\n      'Shooting the moon scores 26 for others'\n    ]\n  },\n  \n  spades: {\n    id: 'spades',\n    name: 'Spades',\n    minPlayers: 4,\n    maxPlayers: 4,\n    description: 'Partnership trick-taking game with bidding',\n    category: 'card',\n    difficulty: 'medium',\n    estimatedTime: '30-45 min',\n    rules: [\n      'Bid on number of tricks you\\'ll take',\n      'Spades are always trump',\n      'Must follow suit if possible',\n      'Score points by making your bid'\n    ]\n  },\n  \n  crazy8s: {\n    id: 'crazy8s',\n    name: 'Crazy 8s',\n    minPlayers: 2,\n    maxPlayers: 8,\n    description: 'Shedding card game similar to Uno',\n    category: 'card',\n    difficulty: 'easy',\n    estimatedTime: '10-20 min',\n    rules: [\n      'Match suit or rank of the top card',\n      '8s can be played anytime and change suit',\n      'First to empty hand wins',\n      'Draw cards if you cannot play'\n    ]\n  },\n  \n  gofish: {\n    id: 'gofish',\n    name: 'Go Fish',\n    minPlayers: 2,\n    maxPlayers: 6,\n    description: 'Collect books of four cards by asking opponents',\n    category: 'card',\n    difficulty: 'easy',\n    estimatedTime: '10-15 min',\n    rules: [\n      'Ask opponents for cards of a specific rank',\n      'If they don\\'t have any, \"Go Fish\" and draw',\n      'Collect books of 4 cards of same rank',\n      'Most books wins when cards run out'\n    ]\n  }\n};\n\nexport function getGameInfo(gameId: string): GameInfo | undefined {\n  return GAME_DEFINITIONS[gameId];\n}\n\nexport function getAllGames(): GameInfo[] {\n  return Object.values(GAME_DEFINITIONS);\n}\n\nexport function getGamesByCategory(category: 'board' | 'card'): GameInfo[] {\n  return getAllGames().filter(game => game.category === category);\n}\n\nexport function getGamesByPlayerCount(playerCount: number): GameInfo[] {\n  return getAllGames().filter(game => \n    playerCount >= game.minPlayers && playerCount <= game.maxPlayers\n  );\n}\n","size_bytes":3463},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket-client.ts":{"content":"export class WebSocketClient {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  private listeners: Map<string, ((data: any) => void)[]> = new Map();\n\n  constructor(url?: string) {\n    this.url = url || this.getWebSocketUrl();\n  }\n\n  private getWebSocketUrl(): string {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    return `${protocol}//${window.location.host}/ws`;\n  }\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.ws = new WebSocket(this.url);\n\n        this.ws.onopen = () => {\n          console.log(\"WebSocket connected\");\n          this.reconnectAttempts = 0;\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            this.handleMessage(data);\n          } catch (error) {\n            console.error(\"Failed to parse WebSocket message:\", error);\n          }\n        };\n\n        this.ws.onclose = (event) => {\n          console.log(\"WebSocket disconnected:\", event.code, event.reason);\n          this.ws = null;\n          \n          if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.attemptReconnect();\n          }\n        };\n\n        this.ws.onerror = (error) => {\n          console.error(\"WebSocket error:\", error);\n          reject(error);\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private attemptReconnect(): void {\n    this.reconnectAttempts++;\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n    \n    console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n    \n    setTimeout(() => {\n      this.connect().catch(() => {\n        if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n          console.error(\"Max reconnection attempts reached\");\n          this.emit('max_reconnect_attempts');\n        }\n      });\n    }, delay);\n  }\n\n  private handleMessage(data: any): void {\n    const { type, ...payload } = data;\n    this.emit(type, payload);\n  }\n\n  send(type: string, data: any = {}): boolean {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.warn(\"WebSocket is not connected\");\n      return false;\n    }\n\n    this.ws.send(JSON.stringify({ type, ...data }));\n    return true;\n  }\n\n  on(event: string, callback: (data: any) => void): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(callback);\n  }\n\n  off(event: string, callback: (data: any) => void): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      const index = eventListeners.indexOf(callback);\n      if (index > -1) {\n        eventListeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, data?: any): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.forEach(callback => callback(data));\n    }\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close(1000, \"Client disconnecting\");\n      this.ws = null;\n    }\n  }\n\n  isConnected(): boolean {\n    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;\n  }\n\n  getReadyState(): number | null {\n    return this.ws ? this.ws.readyState : null;\n  }\n}\n\n// Singleton instance for global use\nexport const websocketClient = new WebSocketClient();\n","size_bytes":3562},"client/src/pages/game-lobby.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { PlayerCard } from \"@/components/player-card\";\nimport { Chat } from \"@/components/chat\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Settings, Crown, UserPlus, Play, Check, X, MoveHorizontal, Eye } from \"lucide-react\";\nimport type { User, GameRoom, GameParticipant } from \"@shared/schema\";\nimport { getGameInfo } from \"@/lib/game-types\";\n\nexport default function GameLobby() {\n  const [match, params] = useRoute(\"/lobby/:roomId\");\n  const roomId = params?.roomId;\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n  const [isReady, setIsReady] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const wsRef = useRef<WebSocket | null>(null);\n\n  const { data: roomData, isLoading } = useQuery<{room: GameRoom, participants: GameParticipant[], gameState?: any}>({\n    queryKey: ['/api/rooms', roomId],\n    enabled: !!roomId,\n  });\n\n\n  const toggleReadyMutation = useMutation({\n    mutationFn: async () => {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'ready_toggle'\n        }));\n        return true;\n      }\n      throw new Error('WebSocket not connected');\n    },\n    onError: () => {\n      toast({\n        title: 'Connection Error',\n        description: 'Unable to toggle ready status. Please check your connection.',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const startGameMutation = useMutation({\n    mutationFn: async () => {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'start_game'\n        }));\n        return true;\n      }\n      throw new Error('WebSocket not connected');\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Failed to Start Game',\n        description: error.message || 'Unable to start the game. Please try again.',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const changeGameTypeMutation = useMutation({\n    mutationFn: async (newGameType: string) => {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        const gameInfo = getGameInfo(newGameType);\n        wsRef.current.send(JSON.stringify({\n          type: 'change_game_type',\n          gameType: newGameType,\n          maxPlayers: gameInfo?.maxPlayers || 2\n        }));\n        return true;\n      }\n      throw new Error('WebSocket not connected');\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Failed to Change Game Type',\n        description: error.message || 'Unable to change the game type. Please try again.',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const movePlayerMutation = useMutation({\n    mutationFn: async ({ participantId, toSpectator }: { participantId: string, toSpectator: boolean }) => {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'move_player',\n          participantId,\n          toSpectator\n        }));\n        return true;\n      }\n      throw new Error('WebSocket not connected');\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Failed to Move Player',\n        description: error.message || 'Unable to move the player. Please try again.',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  useEffect(() => {\n    const userId = localStorage.getItem(\"userId\");\n    const username = localStorage.getItem(\"username\");\n    if (!userId || !username) {\n      setLocation(\"/\");\n      return;\n    }\n    setUser({ id: userId, username, isGuest: true, createdAt: new Date() });\n  }, [setLocation]);\n\n  // WebSocket connection effect\n  useEffect(() => {\n    if (!user || !roomId) return;\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      // Join the room\n      ws.send(JSON.stringify({\n        type: 'join_room',\n        userId: user.id,\n        roomId: roomId\n      }));\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        \n        switch (message.type) {\n          case 'user_joined':\n          case 'user_left':\n          case 'participant_updated':\n          case 'game_type_changed':\n          case 'player_moved':\n            // Refresh room data when participants change or game type changes\n            queryClient.invalidateQueries({ queryKey: ['/api/rooms', roomId] });\n            break;\n            \n          case 'game_started':\n            toast({\n              title: 'Game Started!',\n              description: 'The game has begun. Good luck!'\n            });\n            setLocation(`/game/${roomId}`);\n            break;\n            \n          case 'error':\n            toast({\n              title: 'Error',\n              description: message.message || 'An error occurred',\n              variant: 'destructive'\n            });\n            break;\n        }\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n    };\n\n    ws.onerror = () => {\n      setIsConnected(false);\n      toast({\n        title: 'Connection Error',\n        description: 'Lost connection to the game server. Please refresh the page.',\n        variant: 'destructive'\n      });\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, [user, roomId, setLocation, queryClient, toast]);\n\n  // Handle chat messages\n  const handleSendMessage = (message: string) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'chat_message',\n        message: message\n      }));\n    }\n  };\n\n  // Update ready state based on current user participant\n  useEffect(() => {\n    if (roomData && user) {\n      const currentParticipant = roomData.participants.find(p => p.userId === user.id);\n      if (currentParticipant) {\n        setIsReady(currentParticipant.isReady || false);\n      }\n    }\n  }, [roomData, user]);\n\n  if (!user || isLoading) {\n    return (\n      <div className=\"min-h-screen gradient-bg flex items-center justify-center\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!roomData) {\n    return (\n      <div className=\"min-h-screen gradient-bg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-white mb-4\">Room Not Found</h2>\n          <p className=\"text-gray-400 mb-4\">The room you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation(\"/hub\")} className=\"game-button\">\n            Back to Hub\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const { room, participants = [] } = roomData;\n  const isHost = room.hostId === user.id;\n  const currentUserParticipant = participants.find((p: GameParticipant) => p.userId === user.id);\n  const players = participants.filter((p: GameParticipant) => !p.isSpectator);\n  const spectators = participants.filter((p: GameParticipant) => p.isSpectator);\n  const allPlayersReady = players.length > 1 && players.every((p: GameParticipant) => p.isReady);\n\n  const getGameTypeIcon = (gameType: string) => {\n    const icons: Record<string, string> = {\n      chess: '♔',\n      hearts: '♥',\n      checkers: '⚫',\n      crazy8s: '🎴',\n      spades: '♠',\n      gofish: '🎣'\n    };\n    return icons[gameType] || '🎮';\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      {/* Header */}\n      <header className=\"border-b border-gray-700/50 glass-effect\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setLocation(\"/hub\")}\n                className=\"text-gray-400 hover:text-white\"\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft size={20} />\n              </Button>\n              <h1 className=\"text-xl font-bold text-white\" data-testid=\"text-lobby-title\">Game Lobby</h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className={`flex items-center space-x-2`} data-testid=\"connection-indicator\">\n                <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                <span className={`text-sm ${isConnected ? 'text-green-400' : 'text-red-400'}`}>\n                  {isConnected ? 'Connected' : 'Disconnected'}\n                </span>\n              </div>\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-white\" data-testid=\"button-lobby-settings\">\n                <Settings size={20} />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-4xl mx-auto p-6\">\n        {/* Room Info */}\n        <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50 mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-white\" data-testid=\"text-room-name\">{room.name}</h2>\n                <p className=\"text-gray-400\">\n                  Room ID: <span className=\"font-mono\" data-testid=\"text-room-id\">{room.id}</span>\n                </p>\n              </div>\n              <div className=\"text-right\">\n                {isHost ? (\n                  <div className=\"mb-2\">\n                    <Select value={room.gameType} onValueChange={(value) => changeGameTypeMutation.mutate(value)}>\n                      <SelectTrigger className=\"w-[200px] bg-blue-500/20 text-blue-400 border-blue-500/30 focus:border-blue-400\" data-testid=\"select-game-type\">\n                        <SelectValue>\n                          <span className=\"mr-1\">{getGameTypeIcon(room.gameType)}</span>\n                          {room.gameType.charAt(0).toUpperCase() + room.gameType.slice(1)}\n                        </SelectValue>\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"chess\" data-testid=\"option-chess\">\n                          <span className=\"mr-1\">♔</span> Chess\n                        </SelectItem>\n                        <SelectItem value=\"checkers\" data-testid=\"option-checkers\">\n                          <span className=\"mr-1\">⚫</span> Checkers\n                        </SelectItem>\n                        <SelectItem value=\"hearts\" data-testid=\"option-hearts\">\n                          <span className=\"mr-1\">♥</span> Hearts\n                        </SelectItem>\n                        <SelectItem value=\"spades\" data-testid=\"option-spades\">\n                          <span className=\"mr-1\">♠</span> Spades\n                        </SelectItem>\n                        <SelectItem value=\"crazy8s\" data-testid=\"option-crazy8s\">\n                          <span className=\"mr-1\">🎴</span> Crazy 8s\n                        </SelectItem>\n                        <SelectItem value=\"gofish\" data-testid=\"option-gofish\">\n                          <span className=\"mr-1\">🎣</span> Go Fish\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-xs text-gray-500 mt-1\">Host can change game type</p>\n                  </div>\n                ) : (\n                  <div className=\"bg-blue-500/20 text-blue-400 px-3 py-1 rounded-full text-sm font-medium inline-block mb-2\">\n                    <span className=\"mr-1\">{getGameTypeIcon(room.gameType)}</span>\n                    {room.gameType.charAt(0).toUpperCase() + room.gameType.slice(1)}\n                  </div>\n                )}\n                <p className=\"text-gray-400 text-sm\" data-testid=\"text-player-count\">\n                  {players.length}/{room.maxPlayers} Players\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-400\">Game Mode:</span>\n              <span className=\"bg-green-500/20 text-green-400 px-2 py-1 rounded text-sm\">\n                {room.gameMode.charAt(0).toUpperCase() + room.gameMode.slice(1)}\n              </span>\n              <span className=\"text-sm text-gray-400\">•</span>\n              <span className=\"text-sm text-gray-400\">\n                Host: <span className=\"text-white\">{participants.find((p: GameParticipant) => p.userId === room.hostId)?.userId || 'Unknown'}</span>\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Players Section */}\n          <div className=\"lg:col-span-2\">\n            <h3 className=\"text-xl font-semibold text-white mb-4\" data-testid=\"text-players-title\">Players</h3>\n            <div className=\"space-y-3\">\n              {players.map((participant: GameParticipant) => (\n                <div key={participant.id} className=\"relative\">\n                  <PlayerCard\n                    participant={{\n                      id: participant.id,\n                      userId: participant.userId || '',\n                      isReady: participant.isReady || false,\n                      isSpectator: participant.isSpectator || false\n                    }}\n                    isHost={participant.userId === room.hostId}\n                    isCurrentUser={participant.userId === user.id}\n                  />\n                  {isHost && participant.userId !== user.id && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"absolute top-2 right-2 p-1 h-6 w-6 text-gray-400 hover:text-white hover:bg-red-500/20\"\n                      onClick={() => movePlayerMutation.mutate({ participantId: participant.id, toSpectator: true })}\n                      title=\"Move to spectators\"\n                      data-testid={`button-move-to-spectator-${participant.id}`}\n                    >\n                      <Eye size={12} />\n                    </Button>\n                  )}\n                </div>\n              ))}\n\n              {/* Empty Slots */}\n              {Array.from({ length: room.maxPlayers - players.length }, (_, i) => (\n                <Card key={`empty-${i}`} className=\"bg-game-slate/30 backdrop-blur-sm border-2 border-dashed border-gray-600\">\n                  <CardContent className=\"p-4 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <UserPlus className=\"text-gray-500 text-2xl mb-2 mx-auto\" size={32} />\n                      <p className=\"text-gray-500\">Waiting for players...</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Game Controls */}\n            <div className=\"mt-6 space-y-3\">\n              {!currentUserParticipant?.isSpectator && (\n                <Button\n                  onClick={() => toggleReadyMutation.mutate()}\n                  disabled={toggleReadyMutation.isPending}\n                  className={`w-full font-semibold py-3 px-6 rounded-lg transition-all ${\n                    isReady\n                      ? 'bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white'\n                      : 'bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white'\n                  }`}\n                  data-testid=\"button-ready-toggle\"\n                >\n                  {isReady ? <X className=\"mr-2\" size={16} /> : <Check className=\"mr-2\" size={16} />}\n                  {isReady ? 'Cancel Ready' : 'Ready to Play'}\n                </Button>\n              )}\n              \n              {isHost && (\n                <Button\n                  onClick={() => startGameMutation.mutate()}\n                  disabled={!allPlayersReady || startGameMutation.isPending || !isConnected}\n                  className=\"w-full game-button disabled:opacity-50 disabled:cursor-not-allowed\"\n                  data-testid=\"button-start-game\"\n                >\n                  <Play className=\"mr-2\" size={16} />\n                  Start Game\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Spectators & Chat & Settings */}\n          <div className=\"space-y-6\">\n            {/* Spectators Section */}\n            {spectators.length > 0 && (\n              <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n                <CardContent className=\"p-4\">\n                  <h4 className=\"text-white font-semibold mb-3\" data-testid=\"text-spectators-title\">\n                    Spectators ({spectators.length})\n                  </h4>\n                  <div className=\"space-y-2\">\n                    {spectators.map((participant: GameParticipant) => (\n                      <div key={participant.id} className=\"flex items-center justify-between bg-game-slate/30 p-2 rounded-lg\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-6 h-6 rounded-full bg-gradient-to-br from-gray-500 to-gray-600 flex items-center justify-center text-xs text-white\">\n                            {participant.userId?.charAt(0).toUpperCase()}\n                          </div>\n                          <span className=\"text-white text-sm\">\n                            {participant.userId === user.id ? 'You' : participant.userId}\n                          </span>\n                          <Eye size={12} className=\"text-gray-400\" />\n                        </div>\n                        {isHost && players.length < room.maxPlayers && participant.userId !== user.id && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"p-1 h-6 w-6 text-gray-400 hover:text-white hover:bg-green-500/20\"\n                            onClick={() => movePlayerMutation.mutate({ participantId: participant.id, toSpectator: false })}\n                            title=\"Move to players\"\n                            data-testid={`button-move-to-player-${participant.id}`}\n                          >\n                            <MoveHorizontal size={12} />\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n            \n            {room.enableChat && (\n              <Chat roomId={room.id} onSendMessage={handleSendMessage} />\n            )}\n\n            {/* Game Settings */}\n            <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"text-white font-semibold mb-4\">Game Settings</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-300 text-sm\">Allow Spectators</span>\n                    <span className=\"text-sm text-gray-400\">\n                      {room.allowSpectators ? 'Yes' : 'No'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-300 text-sm\">Private Room</span>\n                    <span className=\"text-sm text-gray-400\">\n                      {room.isPrivate ? 'Yes' : 'No'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-300 text-sm\">Chat Enabled</span>\n                    <span className=\"text-sm text-gray-400\">\n                      {room.enableChat ? 'Yes' : 'No'}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20998},"client/src/pages/game-room.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Settings, Send } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nexport default function GameRoom() {\n  const [match, params] = useRoute(\"/game/:roomId\");\n  const roomId = params?.roomId;\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n\n  const { data: roomData, isLoading } = useQuery<{room: any, participants: any[], gameState?: any}>({\n    queryKey: ['/api/rooms', roomId],\n    enabled: !!roomId,\n  });\n\n  const [isConnected, setIsConnected] = useState(false);\n  const [reconnectAttempts, setReconnectAttempts] = useState(0);\n  const [isReconnecting, setIsReconnecting] = useState(false);\n  const maxReconnectAttempts = 5;\n  const reconnectInterval = useRef<NodeJS.Timeout | null>(null);\n  const [gameState, setGameState] = useState<any>(null);\n  const [isGameLoading, setIsGameLoading] = useState(false);\n  const [moveInProgress, setMoveInProgress] = useState(false);\n  const [lastError, setLastError] = useState<string | null>(null);\n  const [selectedSquare, setSelectedSquare] = useState<{row: number, col: number} | null>(null);\n  const [draggedPiece, setDraggedPiece] = useState<{row: number, col: number, piece: string} | null>(null);\n  const [dragOverSquare, setDragOverSquare] = useState<{row: number, col: number} | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  const touchStartPos = useRef<{x: number, y: number} | null>(null);\n  const touchDraggedPiece = useRef<{row: number, col: number, piece: string} | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const userId = localStorage.getItem(\"userId\");\n    const username = localStorage.getItem(\"username\");\n    if (!userId || !username) {\n      setLocation(\"/\");\n      return;\n    }\n    setUser({ id: userId, username, isGuest: true, createdAt: new Date() });\n  }, [setLocation]);\n\n  // WebSocket connection for game state\n  useEffect(() => {\n    if (!user || !roomId) return;\n\n    const ws = connectWebSocket();\n    \n    return () => {\n      setIsReconnecting(false);\n      setReconnectAttempts(0);\n      \n      if (reconnectInterval.current) {\n        clearTimeout(reconnectInterval.current);\n        reconnectInterval.current = null;\n      }\n      \n      if (ws) {\n        ws.close(1000, 'Component unmounting'); // Clean close\n      }\n    };\n  }, [user, roomId, toast]);\n\n  // Load existing game state if room is already playing\n  useEffect(() => {\n    if (roomData?.room?.status === 'playing' && roomData?.gameState && !gameState) {\n      console.log('Loading existing game state from room data:', roomData.gameState);\n      setGameState(roomData.gameState.gameData);\n    }\n  }, [roomData, gameState]);\n\n  // Handle connection state changes\n  useEffect(() => {\n    if (reconnectAttempts >= maxReconnectAttempts) {\n      toast({\n        title: 'Connection Failed',\n        description: 'Unable to reconnect to game server. Please refresh the page.',\n        variant: 'destructive'\n      });\n    }\n  }, [reconnectAttempts, maxReconnectAttempts, toast]);\n\n  const connectWebSocket = () => {\n    if (!user || !roomId) return;\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      setIsReconnecting(false);\n      setReconnectAttempts(0);\n      \n      // Clear any pending reconnection attempts\n      if (reconnectInterval.current) {\n        clearTimeout(reconnectInterval.current);\n        reconnectInterval.current = null;\n      }\n      \n      // Join the room\n      ws.send(JSON.stringify({\n        type: 'join_room',\n        userId: user.id,\n        roomId: roomId\n      }));\n      \n      toast({\n        title: '🟢 Connected',\n        description: 'Successfully connected to game server',\n        className: 'toast-success'\n      });\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        \n        switch (message.type) {\n          case 'game_started':\n          case 'game_updated':\n            console.log('Received game state message:', message.type, message.gameData);\n            setGameState(message.gameData);\n            setMoveInProgress(false); // Reset move state on game update\n            setLastError(null);\n            \n            if (message.type === 'game_started') {\n              setIsGameLoading(false);\n              // Only show \"game started\" message if the game isn't already over\n              if (!message.gameData?.gameOver) {\n                toast({\n                  title: '🎮 Game Started!',\n                  description: 'The game has begun. Make your move!',\n                  className: 'toast-success'\n                });\n              }\n            } else if (!message.gameData?.gameOver) {\n              // Only show \"move completed\" if game isn't over\n              toast({\n                title: '✅ Move Completed', \n                description: 'Your move has been processed',\n                className: 'toast-success'\n              });\n            }\n            break;\n            \n          case 'chat_message':\n            // Forward to chat component by adding to messages if needed\n            console.log('Chat message received:', message);\n            break;\n            \n          case 'game_ended':\n            toast({\n              title: 'Game Over',\n              description: message.reason || 'The game has ended'\n            });\n            break;\n            \n          case 'rematch_started':\n            // Redirect back to lobby for rematch\n            setLocation(`/lobby/${roomId}`);\n            toast({\n              title: '🔄 Rematch Started',\n              description: 'Ready up for the new game!',\n              className: 'toast-success'\n            });\n            break;\n            \n          case 'draw_offer':\n            toast({\n              title: 'Draw Offer',\n              description: message.message || 'Your opponent offers a draw'\n            });\n            break;\n            \n          case 'error':\n            const errorMsg = message.message || 'An error occurred in the game';\n            setLastError(errorMsg);\n            setMoveInProgress(false);\n            setIsGameLoading(false);\n            \n            toast({\n              title: '❌ Game Error',\n              description: errorMsg,\n              variant: 'destructive',\n              className: 'toast-error'\n            });\n            break;\n        }\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.onclose = (event) => {\n      console.log('WebSocket closed:', event.code, event.reason);\n      setIsConnected(false);\n      \n      // Don't attempt to reconnect if it was a clean close or if we're already reconnecting\n      if (event.code === 1000 || isReconnecting || reconnectAttempts >= maxReconnectAttempts) {\n        return;\n      }\n      \n      attemptReconnect();\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n      \n      if (!isReconnecting && reconnectAttempts < maxReconnectAttempts) {\n        attemptReconnect();\n      }\n    };\n\n    return ws;\n  };\n\n  const attemptReconnect = () => {\n    if (isReconnecting || reconnectAttempts >= maxReconnectAttempts) {\n      return;\n    }\n\n    setIsReconnecting(true);\n    const newAttemptCount = reconnectAttempts + 1;\n    setReconnectAttempts(newAttemptCount);\n\n    const backoffDelay = Math.min(1000 * Math.pow(2, newAttemptCount - 1), 30000); // Exponential backoff, max 30s\n\n    console.log(`Attempting to reconnect (${newAttemptCount}/${maxReconnectAttempts}) in ${backoffDelay}ms`);\n    \n    toast({\n      title: '🔄 Reconnecting...',\n      description: `Attempt ${newAttemptCount} of ${maxReconnectAttempts}`,\n      variant: 'default',\n      className: 'toast-info'\n    });\n\n    reconnectInterval.current = setTimeout(() => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      connectWebSocket();\n    }, backoffDelay);\n  };\n\n  const forceReconnect = () => {\n    setReconnectAttempts(0);\n    setIsReconnecting(false);\n    \n    if (reconnectInterval.current) {\n      clearTimeout(reconnectInterval.current);\n      reconnectInterval.current = null;\n    }\n    \n    if (wsRef.current) {\n      wsRef.current.close();\n    }\n    \n    connectWebSocket();\n  };\n\n  const makeMove = (move: any) => {\n    if (moveInProgress) {\n      toast({\n        title: 'Move in Progress',\n        description: 'Please wait for the current move to complete',\n        variant: 'default'\n      });\n      return;\n    }\n\n    setMoveInProgress(true);\n    setLastError(null);\n\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      console.log('Sending move:', move);\n      wsRef.current.send(JSON.stringify({\n        type: 'game_move',\n        move: move\n      }));\n      \n      // Set timeout to reset move state if no response\n      setTimeout(() => {\n        setMoveInProgress(false);\n      }, 5000);\n    } else {\n      setMoveInProgress(false);\n      const errorMsg = 'Connection lost while making move';\n      setLastError(errorMsg);\n      \n      toast({\n        title: '🔴 Connection Lost',\n        description: 'Reconnecting to game server...',\n        variant: 'destructive',\n        className: 'toast-error'\n      });\n      \n      // Force reconnect and queue the move for retry\n      forceReconnect();\n      \n      // Queue move to retry after successful reconnection\n      setTimeout(() => {\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\n          console.log('Retrying move after reconnection:', move);\n          setMoveInProgress(true);\n          wsRef.current.send(JSON.stringify({\n            type: 'game_move',\n            move: move\n          }));\n          \n          setTimeout(() => setMoveInProgress(false), 5000);\n        }\n      }, 2000); // Wait 2 seconds for reconnection\n    }\n  };\n\n  const handleRematch = () => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'rematch_request',\n        userId: user?.id,\n        roomId: roomId\n      }));\n      \n      toast({\n        title: '🔄 Rematch Requested',\n        description: 'Returning to lobby to ready up for a new game',\n        className: 'toast-success'\n      });\n    }\n  };\n\n  if (!user || isLoading) {\n    return (\n      <div className=\"min-h-screen gradient-bg flex items-center justify-center\">\n        <div className=\"text-white\">Loading game...</div>\n      </div>\n    );\n  }\n\n  if (!roomData) {\n    return (\n      <div className=\"min-h-screen gradient-bg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-white mb-4\">Game Not Found</h2>\n          <p className=\"text-gray-400 mb-4\">The game you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation(\"/hub\")} className=\"game-button\">\n            Back to Hub\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const { room, participants = [] } = roomData;\n\n  const renderGameBoard = () => {\n    if (!gameState) {\n      return (\n        <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\" data-testid=\"game-initializing\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"loading-spin w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full\" />\n                <h3 className=\"text-xl font-semibold text-white loading-pulse\">Game Starting...</h3>\n                <p className=\"text-gray-400\">Please wait while the game initializes.</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    // Render different game boards based on game type\n    switch (room.gameType) {\n      case 'chess':\n        return renderChessBoard();\n      case 'hearts':\n        return renderCardGame();\n      case 'checkers':\n        return renderCheckersBoard();\n      default:\n        return renderGenericGameBoard();\n    }\n  };\n\n  const renderChessBoard = () => {\n    // Create display board with proper orientation for black player\n    const displayBoard = [];\n    for (let displayRow = 0; displayRow < 8; displayRow++) {\n      const actualRow = getActualRow(displayRow);\n      const boardRow = [];\n      for (let displayCol = 0; displayCol < 8; displayCol++) {\n        const actualCol = getActualCol(displayCol);\n        boardRow.push({\n          piece: gameState?.board?.[actualRow]?.[actualCol],\n          actualRow,\n          actualCol,\n          displayRow,\n          displayCol\n        });\n      }\n      displayBoard.push(boardRow);\n    }\n\n    return (\n      <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n        <CardContent className=\"p-6\">\n          {/* Chess Game Status */}\n          {gameState && (\n            <div className=\"mb-4 text-center\">\n              {gameState.gameOver ? (\n                <div className=\"space-y-3\">\n                  <div className=\"text-lg font-bold\">\n                    {gameState.winner === 'draw' ? (\n                      <span className=\"text-yellow-400\">🤝 Game Drawn - {gameState.endReason}</span>\n                    ) : (\n                      <span className=\"text-green-400\">\n                        🏆 {gameState.winner === 'white' ? 'White' : 'Black'} Wins by {gameState.endReason}!\n                      </span>\n                    )}\n                  </div>\n                  <Button\n                    onClick={() => handleRematch()}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors\"\n                    data-testid=\"button-rematch\"\n                  >\n                    🔄 Play Again\n                  </Button>\n                </div>\n              ) : gameState.inCheck ? (\n                <div className=\"text-red-400 font-bold animate-pulse\">\n                  ⚠️ {gameState.turn === 0 ? 'White' : 'Black'} King is in Check!\n                </div>\n              ) : (\n                <div className=\"text-gray-300\">\n                  {gameState.turn === 0 ? 'White' : 'Black'} to move\n                </div>\n              )}\n            </div>\n          )}\n          <div className=\"aspect-square max-w-lg mx-auto\">\n            <div className=\"grid grid-cols-8 gap-0 border-2 border-gray-600 rounded-lg overflow-hidden\">\n              {displayBoard.map((row, displayRowIndex) =>\n                row.map((cell, displayColIndex) => (\n                  <div\n                    key={`${displayRowIndex}-${displayColIndex}`}\n                    className={`aspect-square flex items-center justify-center text-2xl cursor-pointer hover:bg-game-blue/20 transition-colors ${\n                      (displayRowIndex + displayColIndex) % 2 === 0 ? 'bg-amber-100' : 'bg-amber-800'\n                    } ${\n                      selectedSquare?.row === cell.actualRow && selectedSquare?.col === cell.actualCol ? 'ring-4 ring-blue-500' : ''\n                    } ${\n                      dragOverSquare?.row === cell.actualRow && dragOverSquare?.col === cell.actualCol ? 'ring-4 ring-green-500 bg-green-200/30' : ''\n                    }`}\n                    onClick={() => handleChessSquareClick(cell.actualRow, cell.actualCol)}\n                    onDragOver={(e) => handleDragOver(e, cell.actualRow, cell.actualCol)}\n                    onDrop={(e) => handleDrop(e, cell.actualRow, cell.actualCol)}\n                    onDragLeave={() => setDragOverSquare(null)}\n                    data-testid={`chess-square-${cell.actualRow}-${cell.actualCol}`}\n                  >\n                    {cell.piece && (\n                      <span \n                        className={`${\n                          cell.piece === cell.piece?.toUpperCase() ? 'text-white drop-shadow-lg' : 'text-black'\n                        } select-none font-bold border-2 border-gray-800/30 rounded-md p-1 ${\n                          draggedPiece?.row === cell.actualRow && draggedPiece?.col === cell.actualCol ? 'opacity-50' : ''\n                        } ${isPlayerPiece(cell.piece) ? 'hover:scale-110 transition-transform' : ''}`}\n                        style={{\n                          cursor: cell.piece && isPlayerPiece(cell.piece) && isCurrentPlayerTurn() ? 'grab' : 'default',\n                          textShadow: cell.piece === cell.piece?.toUpperCase() \n                            ? '2px 2px 4px rgba(0,0,0,0.8), -1px -1px 2px rgba(255,255,255,0.3)' \n                            : '1px 1px 2px rgba(255,255,255,0.8), -1px -1px 2px rgba(0,0,0,0.5)',\n                          filter: 'drop-shadow(1px 1px 2px rgba(0,0,0,0.5))'\n                        }}\n                        draggable={cell.piece && isPlayerPiece(cell.piece) && isCurrentPlayerTurn()}\n                        onDragStart={(e) => handleDragStart(e, cell.actualRow, cell.actualCol, cell.piece)}\n                        onDragEnd={() => handleDragEnd()}\n                        onTouchStart={(e) => handleTouchStart(e, cell.actualRow, cell.actualCol, cell.piece)}\n                        onTouchMove={(e) => handleTouchMove(e)}\n                        onTouchEnd={(e) => handleTouchEnd(e)}\n                      >\n                        {getChessPieceSymbol(cell.piece)}\n                      </span>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderCardGame = () => {\n    const currentParticipant = participants.find((p: any) => p.userId === user?.id);\n    const hand = gameState?.hands?.[currentParticipant?.id] || [];\n\n    return (\n      <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-6\">\n            {/* Game Area */}\n            <div className=\"text-center py-8\">\n              <h3 className=\"text-xl font-semibold text-white mb-4\">Card Game in Progress</h3>\n              <div className=\"flex justify-center space-x-2\">\n                {gameState?.trick?.map((card: any, index: number) => (\n                  <div\n                    key={index}\n                    className=\"w-16 h-24 bg-white rounded-lg border-2 border-gray-300 flex items-center justify-center text-black\"\n                    data-testid={`played-card-${index}`}\n                  >\n                    {card.card}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Player's Hand */}\n            <div>\n              <h4 className=\"text-white font-semibold mb-2\">Your Hand</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {hand.map((card: string, index: number) => (\n                  <div\n                    key={index}\n                    className=\"w-16 h-24 bg-white rounded-lg border-2 border-gray-300 flex items-center justify-center text-black cursor-pointer hover:bg-gray-100 transition-colors\"\n                    onClick={() => handleCardPlay(card)}\n                    data-testid={`hand-card-${index}`}\n                  >\n                    {card}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderCheckersBoard = () => {\n    return (\n      <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n        <CardContent className=\"p-6\">\n          <div className=\"aspect-square max-w-lg mx-auto\">\n            <div className=\"grid grid-cols-8 gap-0 border-2 border-gray-600 rounded-lg overflow-hidden\">\n              {gameState?.board?.map((row: any[], rowIndex: number) =>\n                row.map((piece: any, colIndex: number) => (\n                  <div\n                    key={`${rowIndex}-${colIndex}`}\n                    className={`aspect-square flex items-center justify-center cursor-pointer hover:bg-game-blue/20 transition-colors ${\n                      (rowIndex + colIndex) % 2 === 0 ? 'bg-amber-100' : 'bg-amber-800'\n                    } ${\n                      selectedSquare?.row === rowIndex && selectedSquare?.col === colIndex ? 'ring-4 ring-blue-500' : ''\n                    } ${\n                      dragOverSquare?.row === rowIndex && dragOverSquare?.col === colIndex ? 'ring-4 ring-green-500 bg-green-200/30' : ''\n                    }`}\n                    onClick={() => handleCheckersSquareClick(rowIndex, colIndex)}\n                    onDragOver={(e) => handleDragOver(e, rowIndex, colIndex)}\n                    onDrop={(e) => handleDrop(e, rowIndex, colIndex)}\n                    onDragLeave={() => setDragOverSquare(null)}\n                    data-testid={`checkers-square-${rowIndex}-${colIndex}`}\n                  >\n                    {piece && (\n                      <div\n                        className={`w-8 h-8 rounded-full border-2 select-none ${\n                          piece.toLowerCase() === 'r'\n                            ? 'bg-red-600 border-red-800'\n                            : 'bg-black border-gray-800'\n                        } ${\n                          draggedPiece?.row === rowIndex && draggedPiece?.col === colIndex ? 'opacity-50' : ''\n                        }`}\n                        draggable={piece && isCheckersPlayerPiece(piece) && isCurrentPlayerTurn()}\n                        onDragStart={(e) => handleDragStart(e, rowIndex, colIndex, piece)}\n                        onDragEnd={() => handleDragEnd()}\n                        onTouchStart={(e) => handleTouchStart(e, rowIndex, colIndex, piece)}\n                        onTouchMove={(e) => handleTouchMove(e)}\n                        onTouchEnd={(e) => handleTouchEnd(e)}\n                        style={{ cursor: piece && isCheckersPlayerPiece(piece) && isCurrentPlayerTurn() ? 'grab' : 'default' }}\n                      />\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderGenericGameBoard = () => {\n    return (\n      <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center\">\n            <h3 className=\"text-xl font-semibold text-white mb-4\">\n              {room.gameType.charAt(0).toUpperCase() + room.gameType.slice(1)} Game\n            </h3>\n            <p className=\"text-gray-400 mb-6\">Game interface for {room.gameType} coming soon!</p>\n            <div className=\"bg-game-slate/50 rounded-lg p-6\">\n              <pre className=\"text-sm text-gray-300 text-left overflow-auto\">\n                {JSON.stringify(gameState, null, 2)}\n              </pre>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const handleChessSquareClick = (row: number, col: number) => {\n    if (!gameState || !isCurrentPlayerTurn()) return;\n\n    const piece = gameState.board[row][col];\n    \n    if (!selectedSquare) {\n      // Select a piece if it belongs to current player\n      if (piece && isPlayerPiece(piece)) {\n        setSelectedSquare({ row, col });\n      }\n    } else {\n      // Try to move the selected piece\n      if (selectedSquare.row === row && selectedSquare.col === col) {\n        // Deselect if clicking same square\n        setSelectedSquare(null);\n      } else {\n        // Attempt move\n        makeMove({\n          type: 'chess_move',\n          data: {\n            from: { row: selectedSquare.row, col: selectedSquare.col },\n            to: { row, col }\n          }\n        });\n        setSelectedSquare(null);\n      }\n    }\n  };\n\n  const getPlayerColor = () => {\n    if (!gameState || !roomData || !user) return null;\n    const currentParticipant = roomData.participants.find((p: any) => p.userId === user.id);\n    if (!currentParticipant || !gameState.playerColors) return null;\n    return gameState.playerColors[currentParticipant.id];\n  };\n\n  const isPlayerPiece = (piece: string) => {\n    const playerColor = getPlayerColor();\n    if (!playerColor) return false;\n    \n    if (room.gameType === 'chess') {\n      return playerColor === 'white' ? piece === piece.toUpperCase() : piece === piece.toLowerCase();\n    } else if (room.gameType === 'checkers') {\n      return playerColor === 'red' ? piece === 'r' || piece === 'R' : piece === 'b' || piece === 'B';\n    }\n    return false;\n  };\n\n  const isCurrentPlayerTurn = () => {\n    if (!gameState || !roomData) return false;\n    const currentParticipant = roomData.participants.find((p: any) => p.userId === user?.id);\n    return currentParticipant && gameState.currentTurn === currentParticipant.id;\n  };\n\n  const handleCardPlay = (card: string) => {\n    makeMove({\n      type: 'play_card',\n      data: { card }\n    });\n  };\n\n  const handleCheckersSquareClick = (row: number, col: number) => {\n    if (!gameState || !isCurrentPlayerTurn()) return;\n\n    const piece = gameState.board[row][col];\n    \n    if (!selectedSquare) {\n      // Select a piece if it belongs to current player\n      if (piece && isCheckersPlayerPiece(piece)) {\n        setSelectedSquare({ row, col });\n      }\n    } else {\n      // Try to move the selected piece\n      if (selectedSquare.row === row && selectedSquare.col === col) {\n        // Deselect if clicking same square\n        setSelectedSquare(null);\n      } else {\n        // Attempt move\n        makeMove({\n          type: 'checkers_move',\n          data: {\n            from: { row: selectedSquare.row, col: selectedSquare.col },\n            to: { row, col }\n          }\n        });\n        setSelectedSquare(null);\n      }\n    }\n  };\n\n  const isCheckersPlayerPiece = (piece: string) => {\n    return isPlayerPiece(piece);\n  };\n\n  const handleForfeit = () => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'game_action',\n        action: 'forfeit'\n      }));\n    }\n  };\n\n  const handleDrawOffer = () => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'game_action',\n        action: 'draw_offer'\n      }));\n    }\n  };\n\n  const handleSendMessage = (message: string) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN && user) {\n      console.log('Sending chat message:', message);\n      wsRef.current.send(JSON.stringify({\n        type: 'chat_message',\n        message: message,\n        userId: user.id,\n        username: user.username\n      }));\n    } else {\n      toast({\n        title: 'Connection Error',\n        description: 'Cannot send message - not connected to server',\n        variant: 'destructive'\n      });\n      // Try to force reconnect\n      forceReconnect();\n    }\n  };\n\n  // Drag and Drop handlers\n  const handleDragStart = (e: React.DragEvent, row: number, col: number, piece: string) => {\n    if (!isCurrentPlayerTurn()) {\n      e.preventDefault();\n      return;\n    }\n    \n    setDraggedPiece({ row, col, piece });\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/plain', `${row},${col}`);\n    \n    // Create a custom drag image\n    const dragImage = e.currentTarget.cloneNode(true) as HTMLElement;\n    dragImage.style.transform = 'rotate(5deg)';\n    e.dataTransfer.setDragImage(dragImage, 20, 20);\n  };\n\n  const handleDragOver = (e: React.DragEvent, row: number, col: number) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n    setDragOverSquare({ row, col });\n  };\n\n  const handleDrop = (e: React.DragEvent, row: number, col: number) => {\n    e.preventDefault();\n    setDragOverSquare(null);\n    \n    if (!draggedPiece) return;\n    \n    const { row: fromRow, col: fromCol } = draggedPiece;\n    \n    if (fromRow === row && fromCol === col) {\n      setDraggedPiece(null);\n      return;\n    }\n    \n    // Determine move type based on game\n    const moveType = roomData?.room?.gameType === 'chess' ? 'chess_move' : 'checkers_move';\n    \n    makeMove({\n      type: moveType,\n      data: {\n        from: { row: fromRow, col: fromCol },\n        to: { row, col }\n      }\n    });\n    \n    setDraggedPiece(null);\n  };\n\n  const handleDragEnd = () => {\n    setDraggedPiece(null);\n    setDragOverSquare(null);\n  };\n\n  // Touch handlers for mobile\n  const handleTouchStart = (e: React.TouchEvent, row: number, col: number, piece: string) => {\n    if (!isCurrentPlayerTurn()) return;\n    \n    const touch = e.touches[0];\n    touchStartPos.current = { x: touch.clientX, y: touch.clientY };\n    touchDraggedPiece.current = { row, col, piece };\n    \n    // Prevent default to avoid scrolling\n    e.preventDefault();\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!touchDraggedPiece.current || !touchStartPos.current) return;\n    \n    e.preventDefault();\n    \n    const touch = e.touches[0];\n    const deltaX = Math.abs(touch.clientX - touchStartPos.current.x);\n    const deltaY = Math.abs(touch.clientY - touchStartPos.current.y);\n    \n    // Start drag if moved enough\n    if (deltaX > 10 || deltaY > 10) {\n      setDraggedPiece(touchDraggedPiece.current);\n      \n      // Find the square under the touch\n      const element = document.elementFromPoint(touch.clientX, touch.clientY);\n      const square = element?.closest('[data-testid*=\\\"square\\\"]');\n      if (square) {\n        const testId = square.getAttribute('data-testid');\n        const match = testId?.match(/(\\d+)-(\\d+)/);\n        if (match) {\n          const row = parseInt(match[1]);\n          const col = parseInt(match[2]);\n          setDragOverSquare({ row, col });\n        }\n      }\n    }\n  };\n\n  const handleTouchEnd = (e: React.TouchEvent) => {\n    if (!touchDraggedPiece.current) return;\n    \n    e.preventDefault();\n    \n    const touch = e.changedTouches[0];\n    const element = document.elementFromPoint(touch.clientX, touch.clientY);\n    const square = element?.closest('[data-testid*=\\\"square\\\"]');\n    \n    if (square && draggedPiece) {\n      const testId = square.getAttribute('data-testid');\n      const match = testId?.match(/(\\d+)-(\\d+)/);\n      if (match) {\n        const row = parseInt(match[1]);\n        const col = parseInt(match[2]);\n        \n        const { row: fromRow, col: fromCol } = touchDraggedPiece.current;\n        \n        if (fromRow !== row || fromCol !== col) {\n          // Determine move type based on game\n          const moveType = roomData?.room?.gameType === 'chess' ? 'chess_move' : 'checkers_move';\n          \n          makeMove({\n            type: moveType,\n            data: {\n              from: { row: fromRow, col: fromCol },\n              to: { row, col }\n            }\n          });\n        }\n      }\n    }\n    \n    // Reset touch state\n    touchStartPos.current = null;\n    touchDraggedPiece.current = null;\n    setDraggedPiece(null);\n    setDragOverSquare(null);\n  };\n\n  // Helper functions for board orientation\n  const shouldFlipBoard = () => {\n    // Flip board if player is playing as black/red (bottom player)\n    const playerColor = getPlayerColor();\n    return playerColor === 'black' || playerColor === 'red';\n  };\n\n  const getDisplayRow = (row: number) => {\n    return shouldFlipBoard() ? 7 - row : row;\n  };\n\n  const getDisplayCol = (col: number) => {\n    return shouldFlipBoard() ? 7 - col : col;\n  };\n\n  const getActualRow = (displayRow: number) => {\n    return shouldFlipBoard() ? 7 - displayRow : displayRow;\n  };\n\n  const getActualCol = (displayCol: number) => {\n    return shouldFlipBoard() ? 7 - displayCol : displayCol;\n  };\n\n  const getPieceSymbol = (piece: string): string => {\n    if (piece && piece.length > 0) {\n      const pieceChar = piece[1]; // Skip color prefix\n      return getChessPieceSymbol(pieceChar);\n    }\n    return '';\n  };\n\n  const getChessPieceSymbol = (piece: string) => {\n    const symbols: Record<string, string> = {\n      'K': '♔', 'Q': '♕', 'R': '♖', 'B': '♗', 'N': '♘', 'P': '♙',\n      'k': '♚', 'q': '♛', 'r': '♜', 'b': '♝', 'n': '♞', 'p': '♟'\n    };\n    return symbols[piece] || piece;\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      {/* Header */}\n      <header className=\"border-b border-gray-700/50 glass-effect\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setLocation('/hub')}\n                className=\"text-gray-400 hover:text-white\"\n                data-testid=\"button-back-to-lobby\"\n              >\n                <ArrowLeft size={20} />\n              </Button>\n              <h1 className=\"text-xl font-bold text-white\" data-testid=\"text-game-title\">\n                {room.name} - {room.gameType.charAt(0).toUpperCase() + room.gameType.slice(1)}\n              </h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className={`flex items-center space-x-2`} data-testid=\"game-connection-status\">\n                <div className={`w-2 h-2 rounded-full ${\n                  isConnected ? 'bg-green-500' : \n                  isReconnecting ? 'bg-yellow-500 animate-pulse' : \n                  'bg-red-500'\n                }`}></div>\n                <span className={`text-sm ${\n                  isConnected ? 'text-green-400' : \n                  isReconnecting ? 'text-yellow-400' : \n                  'text-red-400'\n                }`}>\n                  {isConnected ? 'Connected' : \n                   isReconnecting ? `Reconnecting... (${reconnectAttempts}/${maxReconnectAttempts})` :\n                   reconnectAttempts >= maxReconnectAttempts ? 'Connection Failed' :\n                   'Disconnected'}\n                </span>\n                {(!isConnected && !isReconnecting && reconnectAttempts < maxReconnectAttempts) && (\n                  <Button \n                    onClick={forceReconnect} \n                    size=\"sm\" \n                    variant=\"ghost\" \n                    className=\"text-xs px-2 py-1 h-6\"\n                  >\n                    Retry\n                  </Button>\n                )}\n              </div>\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-white\" data-testid=\"button-game-settings\">\n                <Settings size={20} />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-6xl mx-auto p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Game Board */}\n          <div className=\"lg:col-span-3\">\n            {renderGameBoard()}\n          </div>\n\n          {/* Game Info Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Current Turn */}\n            <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"text-white font-semibold mb-2\">Game Status</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-300 text-sm\">Turn:</span>\n                    <span className=\"text-white text-sm\" data-testid=\"text-current-turn\">\n                      {gameState ? (\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`w-3 h-3 rounded-full ${\n                            getPlayerColor() === 'white' ? 'bg-white border border-gray-400' : \n                            getPlayerColor() === 'red' ? 'bg-red-500' : \n                            getPlayerColor() === 'black' ? 'bg-gray-800' : 'bg-gray-500'\n                          }`}></span>\n                          <span>You are {getPlayerColor() || 'Unknown'}</span>\n                          <span className=\"mx-2\">•</span>\n                          <span>{isCurrentPlayerTurn() ? 'Your Turn' : 'Opponent\\'s Turn'}</span>\n                        </div>\n                      ) : 'Loading...'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-300 text-sm\">Phase:</span>\n                    <span className=\"text-white text-sm\" data-testid=\"text-game-phase\">\n                      {gameState?.phase || 'Starting'}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Players */}\n            <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"text-white font-semibold mb-4\">Players</h4>\n                <div className=\"space-y-3\">\n                  {participants.filter((p: any) => !p.isSpectator).map((participant: any, index: number) => (\n                    <div key={participant.id} className=\"flex items-center space-x-3\" data-testid={`player-info-${index}`}>\n                      <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n                        <span className=\"text-white text-xs font-bold\">\n                          {participant.userId?.substring(0, 2).toUpperCase()}\n                        </span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-white text-sm font-medium\">\n                          {participant.userId === user?.id ? 'You' : `Player ${index + 1}`}\n                        </p>\n                      </div>\n                      {gameState?.currentTurn === participant.id && (\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Game Actions */}\n            <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"text-white font-semibold mb-4\">Actions</h4>\n                <div className=\"space-y-2\">\n                  <Button \n                    onClick={handleForfeit}\n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"w-full text-gray-300 border-gray-600 hover:bg-gray-600/20 transition-all duration-200 hover:scale-105\"\n                    data-testid=\"button-forfeit\"\n                    disabled={moveInProgress}\n                  >\n                    {moveInProgress ? (\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"loading-spin w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full\" />\n                        Processing...\n                      </div>\n                    ) : (\n                      'Forfeit Game'\n                    )}\n                  </Button>\n                  <Button \n                    onClick={handleDrawOffer}\n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"w-full text-gray-300 border-gray-600 hover:bg-gray-600/20 transition-all duration-200 hover:scale-105\"\n                    data-testid=\"button-request-draw\"\n                    disabled={moveInProgress}\n                  >\n                    {moveInProgress ? (\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"loading-spin w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full\" />\n                        Processing...\n                      </div>\n                    ) : (\n                      'Request Draw'\n                    )}\n                  </Button>\n                  {lastError && (\n                    <div className=\"mt-2 p-3 bg-red-950/50 border border-red-500/50 rounded-md text-red-400 text-sm error-shake\" data-testid=\"error-message\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-red-500\">⚠️</span>\n                        <span>{lastError}</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Chat */}\n            {room.enableChat && (\n              <div className=\"bg-game-navy/50 backdrop-blur-sm border border-gray-700/50 rounded-lg p-4\">\n                <h4 className=\"text-white font-semibold mb-4\">Chat</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"h-32 bg-game-slate/30 rounded p-2 overflow-y-auto text-sm text-gray-300\">\n                    <div className=\"text-blue-400\">System: Welcome to the game!</div>\n                    <div className=\"text-gray-500 text-xs\">Chat functionality coming soon...</div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <input \n                      type=\"text\" \n                      placeholder=\"Type a message...\"\n                      className=\"flex-1 px-3 py-2 bg-game-slate/50 border border-gray-600 rounded text-white text-sm placeholder-gray-400 focus:outline-none focus:border-blue-500\"\n                      disabled\n                    />\n                    <Button size=\"sm\" disabled>\n                      <Send className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":42280},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\nexport default function LoginPage() {\n  const [username, setUsername] = useState('');\n  const [isGuest, setIsGuest] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ username, isGuest }: { username: string; isGuest: boolean }) => {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, isGuest }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem('userId', data.user.id);\n      localStorage.setItem('username', data.user.username);\n      queryClient.setQueryData(['user'], data.user);\n      setLocation('/hub');\n    },\n    onError: () => {\n      toast({\n        title: 'Login Failed',\n        description: 'Please try a different username or try again',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username.trim()) {\n      toast({\n        title: 'Username Required',\n        description: 'Please enter a username to continue',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    loginMutation.mutate({ username: username.trim(), isGuest });\n  };\n\n  const handleGuestLogin = () => {\n    const guestName = `Guest${Math.floor(Math.random() * 1000)}`;\n    setUsername(guestName);\n    setIsGuest(true);\n    loginMutation.mutate({ username: guestName, isGuest: true });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Game Hub\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Play board games and card games with friends\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Welcome</CardTitle>\n            <CardDescription>\n              Enter your username to start playing\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  data-testid=\"input-username\"\n                />\n              </div>\n\n              <div className=\"flex flex-col space-y-2\">\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? 'Logging in...' : 'Join Game Hub'}\n                </Button>\n                \n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={handleGuestLogin}\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-guest-login\"\n                >\n                  {loginMutation.isPending ? 'Logging in...' : 'Play as Guest'}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center text-sm text-muted-foreground\">\n          <p>No registration required • Play instantly</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4414},"client/src/pages/main-hub.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CreateRoomModal } from \"@/components/create-room-modal\";\nimport { Settings, Zap, Plus, Users, Wifi } from \"lucide-react\";\nimport type { User, GameRoom } from \"@shared/schema\";\n\nconst gameTypes = [\n  {\n    id: 'chess',\n    name: 'Chess',\n    players: '2 Players',\n    image: 'https://images.unsplash.com/photo-1529699211952-734e80c4d42b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n  },\n  {\n    id: 'hearts',\n    name: 'Hearts',\n    players: '4 Players',\n    image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n  },\n  {\n    id: 'checkers',\n    name: 'Checkers',\n    players: '2 Players',\n    image: 'https://images.unsplash.com/photo-1611273426858-450d8e3c9fce?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n  },\n  {\n    id: 'crazy8s',\n    name: 'Crazy 8s',\n    players: '2-8 Players',\n    image: 'https://pixabay.com/get/g961e3a7828c98ba9d6bce86c9aaefbc934a26e2f950cc79367f86e5aa6ecd9277666c08d4d628199a14cdf274be2027cf9d65cbce854d9d4d5125f83358ff30f_1280.jpg'\n  },\n  {\n    id: 'spades',\n    name: 'Spades',\n    players: '4 Players',\n    image: 'https://images.unsplash.com/photo-1606092195730-5d7b9af1efc5?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n  },\n  {\n    id: 'gofish',\n    name: 'Go Fish',\n    players: '2-6 Players',\n    image: 'https://pixabay.com/get/g6d8286f423c3ae70365f262342004d659315b9866cbdbc2096efe253a3f507dc204b0f46fd052c67e3f8f1d71a863c9498e221ccf19221f2b7a7698d013cd828_1280.jpg'\n  }\n];\n\nexport default function MainHub() {\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  const { data: activeRooms } = useQuery({\n    queryKey: ['/api/rooms'],\n    refetchInterval: 5000,\n  });\n\n  useEffect(() => {\n    const userId = localStorage.getItem(\"userId\");\n    const username = localStorage.getItem(\"username\");\n    if (!userId || !username) {\n      setLocation(\"/\");\n      return;\n    }\n    setUser({ id: userId, username, isGuest: true, createdAt: new Date() });\n  }, [setLocation]);\n\n  if (!user) return null;\n\n  const getUserInitials = (username: string) => {\n    return username.split('_').map(part => part[0]).join('').toUpperCase();\n  };\n\n  const handleQuickPlay = () => {\n    // TODO: Implement quick play matchmaking\n    setLocation(\"/lobby/quick-play\");\n  };\n\n  const handleJoinRoom = () => {\n    setLocation(\"/join\");\n  };\n\n  const handleLocalGames = () => {\n    // TODO: Show local games options\n    setLocation(\"/lobby/local\");\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      {/* Header */}\n      <header className=\"border-b border-gray-700/50 glass-effect\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-game-blue to-game-emerald rounded-lg flex items-center justify-center\">\n                <span className=\"text-white text-sm\">🎮</span>\n              </div>\n              <h1 className=\"text-xl font-bold text-white\" data-testid=\"text-app-name\">GameHub</h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Player Info */}\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"player-avatar bg-gradient-to-br from-purple-500 to-pink-500\" data-testid=\"avatar-user\">\n                  <span>{getUserInitials(user.username)}</span>\n                </div>\n                <span className=\"text-white font-medium\" data-testid=\"text-username\">{user.username}</span>\n              </div>\n              \n              {/* Settings */}\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-white\" data-testid=\"button-settings\">\n                <Settings size={20} />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-white mb-2\" data-testid=\"text-welcome\">Welcome back!</h2>\n          <p className=\"text-gray-400\">Choose your game mode and start playing</p>\n        </div>\n\n        {/* Game Mode Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {/* Quick Play */}\n          <Card className=\"game-card group\" onClick={handleQuickPlay} data-testid=\"card-quick-play\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-500 rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform\">\n                <Zap className=\"text-white text-xl\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Quick Play</h3>\n              <p className=\"text-gray-400 text-sm mb-4\">Join a game instantly with matchmaking</p>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-green-400 text-sm font-medium\">Available</span>\n                <span className=\"text-gray-400 group-hover:text-white transition-colors\">→</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Create Room */}\n          <Card className=\"game-card group\" onClick={() => setShowCreateModal(true)} data-testid=\"card-create-room\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform\">\n                <Plus className=\"text-white text-xl\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Create Room</h3>\n              <p className=\"text-gray-400 text-sm mb-4\">Host a game with custom rules</p>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-blue-400 text-sm font-medium\">Host</span>\n                <span className=\"text-gray-400 group-hover:text-white transition-colors\">→</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Join Room */}\n          <Card className=\"game-card group\" onClick={handleJoinRoom} data-testid=\"card-join-room\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-orange-500 to-red-500 rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform\">\n                <Users className=\"text-white text-xl\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Join Room</h3>\n              <p className=\"text-gray-400 text-sm mb-4\">Find and join existing games</p>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-orange-400 text-sm font-medium\">Join</span>\n                <span className=\"text-gray-400 group-hover:text-white transition-colors\">→</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Local Games */}\n          <Card className=\"game-card group\" onClick={handleLocalGames} data-testid=\"card-local-games\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform\">\n                <Wifi className=\"text-white text-xl\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Local Games</h3>\n              <p className=\"text-gray-400 text-sm mb-4\">Play offline or via local network</p>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-purple-400 text-sm font-medium\">Offline</span>\n                <span className=\"text-gray-400 group-hover:text-white transition-colors\">→</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Active Games Section */}\n        <div className=\"mb-8\">\n          <h3 className=\"text-xl font-semibold text-white mb-4\" data-testid=\"text-active-games\">Your Active Games</h3>\n          <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center py-8\">\n                <span className=\"text-4xl mb-4 block\">🎮</span>\n                <p className=\"text-gray-400\" data-testid=\"text-no-active-games\">No active games</p>\n                <p className=\"text-gray-500 text-sm mt-2\">Start a new game to see it here</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Available Games Grid */}\n        <div>\n          <h3 className=\"text-xl font-semibold text-white mb-4\" data-testid=\"text-available-games\">Available Games</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4\">\n            {gameTypes.map((game) => (\n              <Card key={game.id} className=\"game-card group cursor-pointer\" data-testid={`card-game-${game.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl mb-2\">\n                      {game.id === 'chess' && '♔'}\n                      {game.id === 'hearts' && '♥'}\n                      {game.id === 'checkers' && '⚫'}\n                      {game.id === 'crazy8s' && '🎴'}\n                      {game.id === 'spades' && '♠'}\n                      {game.id === 'gofish' && '🎣'}\n                    </div>\n                    <h4 className=\"text-white font-semibold mb-1\">{game.name}</h4>\n                    <p className=\"text-gray-400 text-sm\">{game.players}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {showCreateModal && (\n        <CreateRoomModal\n          onRoomCreated={(roomId) => {\n            setShowCreateModal(false);\n            setLocation(`/lobby/${roomId}`);\n          }}\n          onClose={() => setShowCreateModal(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":10635},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }","size_bytes":1834},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","size_bytes":1876},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent, DialogDescription } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <DialogDescription className=\"sr-only\">\n          Command palette for searching and selecting items\n        </DialogDescription>\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":5041},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":823},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }","size_bytes":709},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }","size_bytes":1641},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5614},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/join-rooms.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { ArrowLeft, Search, Users, Eye, Lock, Clock, Play, RefreshCw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User, GameRoom } from \"@shared/schema\";\n\nexport default function JoinRooms() {\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n  const [searchFilter, setSearchFilter] = useState('');\n  const [gameTypeFilter, setGameTypeFilter] = useState('all');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: rooms = [], isLoading, refetch } = useQuery<GameRoom[]>({\n    queryKey: ['/api/rooms'],\n    refetchInterval: 5000,\n  });\n\n  const joinRoomMutation = useMutation({\n    mutationFn: async ({ roomId, isSpectator }: { roomId: string; isSpectator?: boolean }) => {\n      const response = await apiRequest('POST', `/api/rooms/${roomId}/join`, {\n        userId: user?.id,\n        isSpectator: isSpectator || false\n      });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: 'Joined Room',\n        description: `Successfully joined ${variables.isSpectator ? 'as spectator' : 'as player'}!`\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/rooms'] });\n      setLocation(`/lobby/${variables.roomId}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Failed to Join',\n        description: error.message || 'Unable to join room. It may be full or no longer available.',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  useEffect(() => {\n    const userId = localStorage.getItem(\"userId\");\n    const username = localStorage.getItem(\"username\");\n    if (!userId || !username) {\n      setLocation(\"/\");\n      return;\n    }\n    setUser({ id: userId, username, isGuest: true, createdAt: new Date() });\n  }, [setLocation]);\n\n  if (!user) return null;\n\n  const getGameDisplayName = (gameType: string) => {\n    const gameNames: Record<string, string> = {\n      chess: 'Chess',\n      checkers: 'Checkers',\n      hearts: 'Hearts',\n      spades: 'Spades',\n      crazy8s: 'Crazy 8s',\n      gofish: 'Go Fish'\n    };\n    return gameNames[gameType] || gameType;\n  };\n\n  const getGameIcon = (gameType: string) => {\n    const icons: Record<string, string> = {\n      chess: '♔',\n      hearts: '♥',\n      checkers: '⚫',\n      crazy8s: '🎴',\n      spades: '♠',\n      gofish: '🎣'\n    };\n    return icons[gameType] || '🎮';\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'waiting':\n        return 'bg-green-500';\n      case 'playing':\n        return 'bg-yellow-500';\n      case 'finished':\n        return 'bg-gray-500';\n      default:\n        return 'bg-gray-400';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'waiting':\n        return 'Waiting for players';\n      case 'playing':\n        return 'Game in progress';\n      case 'finished':\n        return 'Finished';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  // Filter rooms\n  const filteredRooms = rooms.filter((room: GameRoom) => {\n    const matchesSearch = room.name.toLowerCase().includes(searchFilter.toLowerCase());\n    const matchesGameType = gameTypeFilter === 'all' || room.gameType === gameTypeFilter;\n    const isJoinable = room.status === 'waiting' || (room.status === 'playing' && room.allowSpectators);\n    return matchesSearch && matchesGameType && isJoinable;\n  });\n\n  const gameTypes = ['all', 'chess', 'checkers', 'hearts', 'spades', 'crazy8s', 'gofish'];\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      {/* Header */}\n      <header className=\"border-b border-gray-700/50 glass-effect\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setLocation(\"/hub\")}\n                className=\"text-gray-400 hover:text-white\"\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft size={20} />\n              </Button>\n              <h1 className=\"text-xl font-bold text-white\" data-testid=\"text-join-rooms-title\">Join Game Rooms</h1>\n            </div>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => refetch()}\n              className=\"text-gray-400 hover:text-white\"\n              data-testid=\"button-refresh\"\n            >\n              <RefreshCw size={20} />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {/* Filters */}\n        <div className=\"mb-6\">\n          <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n            <CardHeader>\n              <CardTitle className=\"text-white text-lg\">Find Games</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search room names...\"\n                      value={searchFilter}\n                      onChange={(e) => setSearchFilter(e.target.value)}\n                      className=\"pl-10 bg-gray-800 border-gray-600 text-white\"\n                      data-testid=\"input-search-rooms\"\n                    />\n                  </div>\n                </div>\n                <div className=\"sm:w-48\">\n                  <select\n                    value={gameTypeFilter}\n                    onChange={(e) => setGameTypeFilter(e.target.value)}\n                    className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white\"\n                    data-testid=\"select-game-type-filter\"\n                  >\n                    {gameTypes.map(type => (\n                      <option key={type} value={type}>\n                        {type === 'all' ? 'All Games' : getGameDisplayName(type)}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Rooms List */}\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"text-white\">Loading rooms...</div>\n          </div>\n        ) : filteredRooms.length === 0 ? (\n          <Card className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"text-4xl mb-4\">🎮</div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">No Available Rooms</h3>\n              <p className=\"text-gray-400 mb-4\">There are no rooms matching your criteria.</p>\n              <Button \n                onClick={() => setLocation(\"/hub\")}\n                className=\"game-button\"\n                data-testid=\"button-create-room-redirect\"\n              >\n                Create a Room Instead\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n            {filteredRooms.map((room: GameRoom) => (\n              <Card key={room.id} className=\"bg-game-navy/50 backdrop-blur-sm border-gray-700/50 hover:border-game-blue transition-colors\" data-testid={`card-room-${room.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg text-white flex items-center space-x-2\">\n                      <span className=\"text-2xl\">{getGameIcon(room.gameType)}</span>\n                      <span data-testid={`text-room-name-${room.id}`}>{room.name}</span>\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-1\">\n                      {room.isPrivate && <Lock className=\"h-4 w-4 text-gray-400\" />}\n                      {room.allowSpectators && <Eye className=\"h-4 w-4 text-gray-400\" />}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"secondary\">{getGameDisplayName(room.gameType)}</Badge>\n                    <span className={`w-2 h-2 rounded-full ${getStatusColor(room.status)}`}></span>\n                    <span className=\"text-sm text-gray-400\">{getStatusText(room.status)}</span>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between text-sm text-gray-400\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Users className=\"h-4 w-4\" />\n                      <span data-testid={`text-room-players-${room.id}`}>Players: 1/{room.maxPlayers}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span>Just now</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    {room.status === 'waiting' && (\n                      <Button\n                        onClick={() => joinRoomMutation.mutate({ roomId: room.id, isSpectator: false })}\n                        disabled={joinRoomMutation.isPending}\n                        className=\"flex-1 bg-green-600 hover:bg-green-700 text-white\"\n                        data-testid={`button-join-as-player-${room.id}`}\n                      >\n                        <Users className=\"h-4 w-4 mr-1\" />\n                        Join as Player\n                      </Button>\n                    )}\n                    \n                    {room.allowSpectators && (\n                      <Button\n                        onClick={() => joinRoomMutation.mutate({ roomId: room.id, isSpectator: true })}\n                        disabled={joinRoomMutation.isPending}\n                        variant=\"outline\"\n                        className={`${room.status === 'waiting' ? 'flex-none' : 'flex-1'} border-gray-600 text-gray-300 hover:bg-gray-700`}\n                        data-testid={`button-join-as-spectator-${room.id}`}\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        Spectate\n                      </Button>\n                    )}\n                  </div>\n\n                  {room.status === 'playing' && !room.allowSpectators && (\n                    <div className=\"text-center py-2\">\n                      <span className=\"text-yellow-400 text-sm flex items-center justify-center\">\n                        <Play className=\"h-4 w-4 mr-1\" />\n                        Game in progress\n                      </span>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11738}}}